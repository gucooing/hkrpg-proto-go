syntax = "proto3";

package proto;

option go_package = "./;proto";

import "enum.server.proto";

message MailRedisData {
  MailBin mail_bin = 1; // 邮件内容
  uint32 id = 2; // id
  bool is_read = 3; // 已读
  bool is_attachment_got = 4; // 附件
}

message MailBin {
  string title = 1; // 标题
  string content = 2; // 内容
  string sender = 3; // 发件人
  repeated ItemParamBin item_param_list = 4; // 物品列表
  fixed32 send_time = 5; // 发送时间
  fixed32 expire_time = 6; // 过期时间
  uint32 importance = 7; // 重要性
  uint32 config_id = 8; // 配置id
  repeated string argument_list = 9; // 参数列表
  uint32 item_limit_type = 10; // 限制类型
  uint32 source_type = 11; // 源类型
  string tag = 12; // 标签
  uint32 reason_type = 13; // 原因类型
}

message ItemParamBin {
  uint32 item_id = 1; // 物品id
  uint32 count = 2; // 数量
  uint32 level = 3; // 等级
  uint32 promote_level = 4; // 突破等级
}

enum PlayerStatusType {
  PLAYER_STATUS_OFFLINE = 0;
  PLAYER_STATUS_ONLINE = 1;
}

message PlayerStatusRedisData {// 玩家状态db
  PlayerStatusType status = 1; // 玩家状态
  uint32 gameserver_id = 2; // 登录的gameserver
  uint32 gateserver_id = 3; // 登录的gateserver
  uint64 login_rand = 4; // 随机种子
  int64 login_time = 5; // 登录时间
  uint32 uid = 6; // uid
  uint32 data_version = 7; // 数据版本
}

message RedisMessageData{
  uint64 chat_room_id = 1; // 房间号
  repeated Message chat_list = 2; // 消息队列
}

message Message {
  uint64 send_time = 1; // 发送时间
  uint32 to_uid = 2; // 目标uid
  uint32 from_uid = 3; // 发送者uid
  MsgType msg_type = 4; // 消息类型
  string text = 5; // 文本消息内容
  uint32 emote = 6; // 表情消息内容
}

message PlayerBasicBriefData {// 玩家简要信息
  string nickname = 1; // 昵称
  uint32 level = 2; // 等级
  uint32 world_level = 3; // 世界等级
  int64 last_login_time = 4;// 上一次登录时间
  uint32 head_image_avatar_id = 5; // 头像id
  uint32 exp = 6; // 经验
  PlatformType platform_type = 7; // 登录设备
  uint32 uid = 8; // 游戏uid
  PlayerStatusType status = 9; // 玩家状态
  string signature = 10; // 签名
}

message ApplyFriend {// 好友申请（仅有node有修改权限
  uint32 uid = 1; // 玩家
  map<uint32,ReceiveApply> recv_apply_friend = 3; // 接收到的好友申请
}

message ReceiveApply {
  uint32 apply_uid = 1; // 申请uid
  int64 apply_time = 2; // 申请时间
}

message AcceptApplyFriend { // 被同意的好友申请（仅有node有修改权限
  uint32 uid = 1; // 玩家
  map<uint32,ReceiveApply> recv_apply_friend = 3; // 被同意的好友申请
}