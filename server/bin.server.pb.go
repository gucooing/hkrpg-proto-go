// TODO 不要轻易修改已有字段类型！！！！！！

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: bin.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerBasicCompBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 uid = 1; // uid
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"` // 等级
	// uint32 exp = 3; // 经验
	Nickname             string                   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                                                                                                     // 昵称
	WorldLevel           uint32                   `protobuf:"varint,5,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`                                                                                                              // 世界等级
	Activity             *Activity                `protobuf:"bytes,6,opt,name=activity,proto3" json:"activity,omitempty"`                                                                                                                                     // 活动
	Signature            string                   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`                                                                                                                                   // 签名
	HeadImageAvatarId    uint32                   `protobuf:"varint,8,opt,name=head_image_avatar_id,json=headImageAvatarId,proto3" json:"head_image_avatar_id,omitempty"`                                                                                     // 头像id
	Birthday             uint32                   `protobuf:"varint,9,opt,name=birthday,proto3" json:"birthday,omitempty"`                                                                                                                                    // 生日
	Scene                *Scene                   `protobuf:"bytes,10,opt,name=scene,proto3" json:"scene,omitempty"`                                                                                                                                          // 当前场景
	Pos                  *VectorBin               `protobuf:"bytes,11,opt,name=pos,proto3" json:"pos,omitempty"`                                                                                                                                              // 坐标
	Rot                  *VectorBin               `protobuf:"bytes,12,opt,name=rot,proto3" json:"rot,omitempty"`                                                                                                                                              // 朝向
	Avatar               *Avatar                  `protobuf:"bytes,13,opt,name=avatar,proto3" json:"avatar,omitempty"`                                                                                                                                        // 角色数据
	LineUp               *LineUp                  `protobuf:"bytes,14,opt,name=lineUp,proto3" json:"lineUp,omitempty"`                                                                                                                                        // 队伍数据
	Item                 *Item                    `protobuf:"bytes,15,opt,name=item,proto3" json:"item,omitempty"`                                                                                                                                            // 背包
	Gacha                *Gacha                   `protobuf:"bytes,16,opt,name=gacha,proto3" json:"gacha,omitempty"`                                                                                                                                          // 抽卡数据
	Battle               *Battle                  `protobuf:"bytes,17,opt,name=battle,proto3" json:"battle,omitempty"`                                                                                                                                        // 战斗
	RewardTakenLevelList []uint32                 `protobuf:"varint,18,rep,packed,name=reward_taken_level_list,json=rewardTakenLevelList,proto3" json:"reward_taken_level_list,omitempty"`                                                                    // 等级奖励领取级别列表
	OpenStateMap         map[uint32]uint32        `protobuf:"bytes,19,rep,name=open_state_map,json=openStateMap,proto3" json:"open_state_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`            // 地图开放状态
	RegisterTime         uint32                   `protobuf:"fixed32,20,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`                                                                                                      // 注册时间
	TotalLoginDays       uint32                   `protobuf:"varint,21,opt,name=total_login_days,json=totalLoginDays,proto3" json:"total_login_days,omitempty"`                                                                                               // 登录天数
	TotalGameTime        uint32                   `protobuf:"varint,22,opt,name=total_game_time,json=totalGameTime,proto3" json:"total_game_time,omitempty"`                                                                                                  // 总游戏时长
	LastLoginTime        uint32                   `protobuf:"fixed32,23,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                                                                                                 // 上次登录时间
	LastLoginPlatform    uint32                   `protobuf:"varint,24,opt,name=last_login_platform,json=lastLoginPlatform,proto3" json:"last_login_platform,omitempty"`                                                                                      // 最后登录平台
	LastLogoutTime       uint32                   `protobuf:"fixed32,25,opt,name=last_logout_time,json=lastLogoutTime,proto3" json:"last_logout_time,omitempty"`                                                                                              // 最后退出时间
	Mail                 *Mail                    `protobuf:"bytes,26,opt,name=mail,proto3" json:"mail,omitempty"`                                                                                                                                            // 邮件
	Friend               *PlayerFriend            `protobuf:"bytes,27,opt,name=friend,proto3" json:"friend,omitempty"`                                                                                                                                        // 好友
	DataVersion          uint32                   `protobuf:"varint,28,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`                                                                                                          // 数据版本
	LastDailyRefreshTime uint32                   `protobuf:"fixed32,29,opt,name=last_daily_refresh_time,json=lastDailyRefreshTime,proto3" json:"last_daily_refresh_time,omitempty"`                                                                          // 最后每日刷新时间
	Tutorial             *TutorialDb              `protobuf:"bytes,30,opt,name=tutorial,proto3" json:"tutorial,omitempty"`                                                                                                                                    // 教程
	IsProficientPlayer   bool                     `protobuf:"varint,31,opt,name=is_proficient_player,json=isProficientPlayer,proto3" json:"is_proficient_player,omitempty"`                                                                                   // 是否老玩家
	LanguageType         uint32                   `protobuf:"varint,32,opt,name=language_type,json=languageType,proto3" json:"language_type,omitempty"`                                                                                                       // 语言
	ClientAppVersion     string                   `protobuf:"bytes,33,opt,name=client_app_version,json=clientAppVersion,proto3" json:"client_app_version,omitempty"`                                                                                          // 客户端版本
	ClientDeviceInfo     string                   `protobuf:"bytes,34,opt,name=client_device_info,json=clientDeviceInfo,proto3" json:"client_device_info,omitempty"`                                                                                          // 客户端设备信息
	ClientSystemVersion  string                   `protobuf:"bytes,35,opt,name=client_system_version,json=clientSystemVersion,proto3" json:"client_system_version,omitempty"`                                                                                 // 客户端系统版本
	SetLanguageTag       uint32                   `protobuf:"varint,36,opt,name=set_language_tag,json=setLanguageTag,proto3" json:"set_language_tag,omitempty"`                                                                                               // 设置语言标签
	GuidSeqId            uint32                   `protobuf:"varint,37,opt,name=guid_seq_id,json=guidSeqId,proto3" json:"guid_seq_id,omitempty"`                                                                                                              // 序列号
	MessageGroupList     map[uint32]*MessageGroup `protobuf:"bytes,38,rep,name=message_group_list,json=messageGroupList,proto3" json:"message_group_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // NPC聊天信息
	PivotClientTime      float64                  `protobuf:"fixed64,39,opt,name=pivot_client_time,json=pivotClientTime,proto3" json:"pivot_client_time,omitempty"`                                                                                           // 客户端时间
	PivotUnixTime        float64                  `protobuf:"fixed64,40,opt,name=pivot_unix_time,json=pivotUnixTime,proto3" json:"pivot_unix_time,omitempty"`                                                                                                 // unix时间
	PlayerStatId         uint64                   `protobuf:"varint,41,opt,name=player_stat_id,json=playerStatId,proto3" json:"player_stat_id,omitempty"`                                                                                                     // 玩家统计id
	NicknameAuditBin     *ContentAuditBin         `protobuf:"bytes,42,opt,name=nickname_audit_bin,json=nicknameAuditBin,proto3" json:"nickname_audit_bin,omitempty"`                                                                                          // 昵称审核bin
	IpCountryCode        string                   `protobuf:"bytes,43,opt,name=ip_country_code,json=ipCountryCode,proto3" json:"ip_country_code,omitempty"`                                                                                                   // ip国家代码
	IpRegionName         string                   `protobuf:"bytes,44,opt,name=ip_region_name,json=ipRegionName,proto3" json:"ip_region_name,omitempty"`                                                                                                      // ip区域名称
	Mission              *Mission                 `protobuf:"bytes,45,opt,name=mission,proto3" json:"mission,omitempty"`                                                                                                                                      // 任务
}

func (x *PlayerBasicCompBin) Reset() {
	*x = PlayerBasicCompBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBasicCompBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBasicCompBin) ProtoMessage() {}

func (x *PlayerBasicCompBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBasicCompBin.ProtoReflect.Descriptor instead.
func (*PlayerBasicCompBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerBasicCompBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerBasicCompBin) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBasicCompBin) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *PlayerBasicCompBin) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *PlayerBasicCompBin) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PlayerBasicCompBin) GetHeadImageAvatarId() uint32 {
	if x != nil {
		return x.HeadImageAvatarId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetBirthday() uint32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *PlayerBasicCompBin) GetScene() *Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *PlayerBasicCompBin) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *PlayerBasicCompBin) GetRot() *VectorBin {
	if x != nil {
		return x.Rot
	}
	return nil
}

func (x *PlayerBasicCompBin) GetAvatar() *Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *PlayerBasicCompBin) GetLineUp() *LineUp {
	if x != nil {
		return x.LineUp
	}
	return nil
}

func (x *PlayerBasicCompBin) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PlayerBasicCompBin) GetGacha() *Gacha {
	if x != nil {
		return x.Gacha
	}
	return nil
}

func (x *PlayerBasicCompBin) GetBattle() *Battle {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *PlayerBasicCompBin) GetRewardTakenLevelList() []uint32 {
	if x != nil {
		return x.RewardTakenLevelList
	}
	return nil
}

func (x *PlayerBasicCompBin) GetOpenStateMap() map[uint32]uint32 {
	if x != nil {
		return x.OpenStateMap
	}
	return nil
}

func (x *PlayerBasicCompBin) GetRegisterTime() uint32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTotalLoginDays() uint32 {
	if x != nil {
		return x.TotalLoginDays
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTotalGameTime() uint32 {
	if x != nil {
		return x.TotalGameTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLoginTime() uint32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLoginPlatform() uint32 {
	if x != nil {
		return x.LastLoginPlatform
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastLogoutTime() uint32 {
	if x != nil {
		return x.LastLogoutTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetMail() *Mail {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *PlayerBasicCompBin) GetFriend() *PlayerFriend {
	if x != nil {
		return x.Friend
	}
	return nil
}

func (x *PlayerBasicCompBin) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *PlayerBasicCompBin) GetLastDailyRefreshTime() uint32 {
	if x != nil {
		return x.LastDailyRefreshTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetTutorial() *TutorialDb {
	if x != nil {
		return x.Tutorial
	}
	return nil
}

func (x *PlayerBasicCompBin) GetIsProficientPlayer() bool {
	if x != nil {
		return x.IsProficientPlayer
	}
	return false
}

func (x *PlayerBasicCompBin) GetLanguageType() uint32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *PlayerBasicCompBin) GetClientAppVersion() string {
	if x != nil {
		return x.ClientAppVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientDeviceInfo() string {
	if x != nil {
		return x.ClientDeviceInfo
	}
	return ""
}

func (x *PlayerBasicCompBin) GetClientSystemVersion() string {
	if x != nil {
		return x.ClientSystemVersion
	}
	return ""
}

func (x *PlayerBasicCompBin) GetSetLanguageTag() uint32 {
	if x != nil {
		return x.SetLanguageTag
	}
	return 0
}

func (x *PlayerBasicCompBin) GetGuidSeqId() uint32 {
	if x != nil {
		return x.GuidSeqId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetMessageGroupList() map[uint32]*MessageGroup {
	if x != nil {
		return x.MessageGroupList
	}
	return nil
}

func (x *PlayerBasicCompBin) GetPivotClientTime() float64 {
	if x != nil {
		return x.PivotClientTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetPivotUnixTime() float64 {
	if x != nil {
		return x.PivotUnixTime
	}
	return 0
}

func (x *PlayerBasicCompBin) GetPlayerStatId() uint64 {
	if x != nil {
		return x.PlayerStatId
	}
	return 0
}

func (x *PlayerBasicCompBin) GetNicknameAuditBin() *ContentAuditBin {
	if x != nil {
		return x.NicknameAuditBin
	}
	return nil
}

func (x *PlayerBasicCompBin) GetIpCountryCode() string {
	if x != nil {
		return x.IpCountryCode
	}
	return ""
}

func (x *PlayerBasicCompBin) GetIpRegionName() string {
	if x != nil {
		return x.IpRegionName
	}
	return ""
}

func (x *PlayerBasicCompBin) GetMission() *Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialActivity []uint32          `protobuf:"varint,1,rep,packed,name=trial_activity,json=trialActivity,proto3" json:"trial_activity,omitempty"`                                                                                   // 已完成的试用角色
	ActivityLogin map[uint32]uint32 `protobuf:"bytes,2,rep,name=activity_login,json=activityLogin,proto3" json:"activity_login,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 登录活动
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{1}
}

func (x *Activity) GetTrialActivity() []uint32 {
	if x != nil {
		return x.TrialActivity
	}
	return nil
}

func (x *Activity) GetActivityLogin() map[uint32]uint32 {
	if x != nil {
		return x.ActivityLogin
	}
	return nil
}

type Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId uint32 `protobuf:"varint,1,opt,name=entryId,proto3" json:"entryId,omitempty"`
}

func (x *Scene) Reset() {
	*x = Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{2}
}

func (x *Scene) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList       map[uint32]*AvatarBin `protobuf:"bytes,1,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                     // 角色列表
	Gender           Gender                `protobuf:"varint,2,opt,name=gender,proto3,enum=proto.Gender" json:"gender,omitempty"`                                                                                                                     // 性别
	BattleAvatarList map[uint32]*AvatarBin `protobuf:"bytes,5,rep,name=battle_avatar_list,json=battleAvatarList,proto3" json:"battle_avatar_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 战斗角色拷贝
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{3}
}

func (x *Avatar) GetAvatarList() map[uint32]*AvatarBin {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *Avatar) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GenderNone
}

func (x *Avatar) GetBattleAvatarList() map[uint32]*AvatarBin {
	if x != nil {
		return x.BattleAvatarList
	}
	return nil
}

type AvatarBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId                uint32                          `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`                                                                                                                                             // ID
	Exp                     uint32                          `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                                                                       // 经验
	Level                   uint32                          `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                                                                                                                                                                   // 等级
	AvatarType              uint32                          `protobuf:"varint,4,opt,name=avatar_type,json=avatarType,proto3" json:"avatar_type,omitempty"`                                                                                                                                       // 状态
	FirstMetTimeStamp       uint64                          `protobuf:"varint,5,opt,name=first_met_time_stamp,json=firstMetTimeStamp,proto3" json:"first_met_time_stamp,omitempty"`                                                                                                              // 获取时间
	PromoteLevel            uint32                          `protobuf:"varint,6,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`                                                                                                                                 // 突破等级
	TakenRewards            []uint32                        `protobuf:"varint,7,rep,packed,name=taken_rewards,json=takenRewards,proto3" json:"taken_rewards,omitempty"`                                                                                                                          // 已领取的突破奖励
	Hp                      uint32                          `protobuf:"varint,8,opt,name=hp,proto3" json:"hp,omitempty"`                                                                                                                                                                         // 血量
	SpBar                   *AvatarSpBarInfo                `protobuf:"bytes,9,opt,name=sp_bar,json=spBar,proto3" json:"sp_bar,omitempty"`                                                                                                                                                       // 能量
	IsMultiPath             bool                            `protobuf:"varint,10,opt,name=is_multi_path,json=isMultiPath,proto3" json:"is_multi_path,omitempty"`                                                                                                                                 // 是否多命途
	CurPath                 uint32                          `protobuf:"varint,11,opt,name=cur_path,json=curPath,proto3" json:"cur_path,omitempty"`                                                                                                                                               //当前命途
	MultiPathAvatarInfoList map[uint32]*MultiPathAvatarInfo `protobuf:"bytes,12,rep,name=multi_path_avatar_info_list,json=multiPathAvatarInfoList,proto3" json:"multi_path_avatar_info_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //属性列表
}

func (x *AvatarBin) Reset() {
	*x = AvatarBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarBin) ProtoMessage() {}

func (x *AvatarBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarBin.ProtoReflect.Descriptor instead.
func (*AvatarBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{4}
}

func (x *AvatarBin) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AvatarBin) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AvatarBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AvatarBin) GetAvatarType() uint32 {
	if x != nil {
		return x.AvatarType
	}
	return 0
}

func (x *AvatarBin) GetFirstMetTimeStamp() uint64 {
	if x != nil {
		return x.FirstMetTimeStamp
	}
	return 0
}

func (x *AvatarBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *AvatarBin) GetTakenRewards() []uint32 {
	if x != nil {
		return x.TakenRewards
	}
	return nil
}

func (x *AvatarBin) GetHp() uint32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *AvatarBin) GetSpBar() *AvatarSpBarInfo {
	if x != nil {
		return x.SpBar
	}
	return nil
}

func (x *AvatarBin) GetIsMultiPath() bool {
	if x != nil {
		return x.IsMultiPath
	}
	return false
}

func (x *AvatarBin) GetCurPath() uint32 {
	if x != nil {
		return x.CurPath
	}
	return 0
}

func (x *AvatarBin) GetMultiPathAvatarInfoList() map[uint32]*MultiPathAvatarInfo {
	if x != nil {
		return x.MultiPathAvatarInfoList
	}
	return nil
}

type MultiPathAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarId          uint32            `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"` // ID
	Rank              uint32            `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	SkilltreeList     []*AvatarSkillBin `protobuf:"bytes,3,rep,name=skilltree_list,json=skilltreeList,proto3" json:"skilltree_list,omitempty"`                                                                                  // 技能库
	EquipmentUniqueId uint32            `protobuf:"varint,4,opt,name=equipment_uniqueId,json=equipmentUniqueId,proto3" json:"equipment_uniqueId,omitempty"`                                                                     // 装备光锥
	EquipRelic        map[uint32]uint32 `protobuf:"bytes,5,rep,name=equip_relic,json=equipRelic,proto3" json:"equip_relic,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 装备圣遗物
}

func (x *MultiPathAvatarInfo) Reset() {
	*x = MultiPathAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPathAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPathAvatarInfo) ProtoMessage() {}

func (x *MultiPathAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPathAvatarInfo.ProtoReflect.Descriptor instead.
func (*MultiPathAvatarInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{5}
}

func (x *MultiPathAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *MultiPathAvatarInfo) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MultiPathAvatarInfo) GetSkilltreeList() []*AvatarSkillBin {
	if x != nil {
		return x.SkilltreeList
	}
	return nil
}

func (x *MultiPathAvatarInfo) GetEquipmentUniqueId() uint32 {
	if x != nil {
		return x.EquipmentUniqueId
	}
	return 0
}

func (x *MultiPathAvatarInfo) GetEquipRelic() map[uint32]uint32 {
	if x != nil {
		return x.EquipRelic
	}
	return nil
}

type AvatarSpBarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSp uint32 `protobuf:"varint,1,opt,name=cur_sp,json=curSp,proto3" json:"cur_sp,omitempty"` // 当前能量
	MaxSp uint32 `protobuf:"varint,2,opt,name=max_sp,json=maxSp,proto3" json:"max_sp,omitempty"` // 当前等级
}

func (x *AvatarSpBarInfo) Reset() {
	*x = AvatarSpBarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSpBarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSpBarInfo) ProtoMessage() {}

func (x *AvatarSpBarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSpBarInfo.ProtoReflect.Descriptor instead.
func (*AvatarSpBarInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{6}
}

func (x *AvatarSpBarInfo) GetCurSp() uint32 {
	if x != nil {
		return x.CurSp
	}
	return 0
}

func (x *AvatarSpBarInfo) GetMaxSp() uint32 {
	if x != nil {
		return x.MaxSp
	}
	return 0
}

type AvatarSkillBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId uint32 `protobuf:"varint,1,opt,name=point_id,json=pointId,proto3" json:"point_id,omitempty"` // 技能id
	Level   uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                    // 等级
}

func (x *AvatarSkillBin) Reset() {
	*x = AvatarSkillBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarSkillBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarSkillBin) ProtoMessage() {}

func (x *AvatarSkillBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarSkillBin.ProtoReflect.Descriptor instead.
func (*AvatarSkillBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{7}
}

func (x *AvatarSkillBin) GetPointId() uint32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *AvatarSkillBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type VectorBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *VectorBin) Reset() {
	*x = VectorBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorBin) ProtoMessage() {}

func (x *VectorBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorBin.ProtoReflect.Descriptor instead.
func (*VectorBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{8}
}

func (x *VectorBin) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorBin) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorBin) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type LineUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainLineUp     uint32           `protobuf:"varint,1,opt,name=main_line_up,json=mainLineUp,proto3" json:"main_line_up,omitempty"`                                                                                                     // 当前上场队伍
	Mp             uint32           `protobuf:"varint,2,opt,name=mp,proto3" json:"mp,omitempty"`                                                                                                                                         // 当前能量
	LineUpList     map[uint32]*Line `protobuf:"bytes,3,rep,name=line_up_list,json=lineUpList,proto3" json:"line_up_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`             // 普通队伍
	BattleLineList map[uint32]*Line `protobuf:"bytes,4,rep,name=battle_line_list,json=battleLineList,proto3" json:"battle_line_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 战斗队伍
}

func (x *LineUp) Reset() {
	*x = LineUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineUp) ProtoMessage() {}

func (x *LineUp) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineUp.ProtoReflect.Descriptor instead.
func (*LineUp) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{9}
}

func (x *LineUp) GetMainLineUp() uint32 {
	if x != nil {
		return x.MainLineUp
	}
	return 0
}

func (x *LineUp) GetMp() uint32 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *LineUp) GetLineUpList() map[uint32]*Line {
	if x != nil {
		return x.LineUpList
	}
	return nil
}

func (x *LineUp) GetBattleLineList() map[uint32]*Line {
	if x != nil {
		return x.BattleLineList
	}
	return nil
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                                // 队伍名称
	AvatarIdList map[uint32]*LineAvatarList `protobuf:"bytes,2,rep,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 角色列表
	Index        uint32                     `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                                                                                                                             // 第几个队伍
	LeaderSlot   uint32                     `protobuf:"varint,4,opt,name=leader_slot,json=leaderSlot,proto3" json:"leader_slot,omitempty"`                                                                                                 // 当前角色是第几个
	LineType     ExtraLineupType            `protobuf:"varint,5,opt,name=line_type,json=lineType,proto3,enum=proto.ExtraLineupType" json:"line_type,omitempty"`                                                                            // 队伍类型
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{10}
}

func (x *Line) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Line) GetAvatarIdList() map[uint32]*LineAvatarList {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *Line) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Line) GetLeaderSlot() uint32 {
	if x != nil {
		return x.LeaderSlot
	}
	return 0
}

func (x *Line) GetLineType() ExtraLineupType {
	if x != nil {
		return x.LineType
	}
	return ExtraLineupType_LINEUP_NONE
}

type LineAvatarList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot           uint32         `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"` //第几个
	AvatarId       uint32         `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	LineAvatarType LineAvatarType `protobuf:"varint,3,opt,name=line_avatar_type,json=lineAvatarType,proto3,enum=proto.LineAvatarType" json:"line_avatar_type,omitempty"` // 角色属性
}

func (x *LineAvatarList) Reset() {
	*x = LineAvatarList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineAvatarList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineAvatarList) ProtoMessage() {}

func (x *LineAvatarList) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineAvatarList.ProtoReflect.Descriptor instead.
func (*LineAvatarList) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{11}
}

func (x *LineAvatarList) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *LineAvatarList) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *LineAvatarList) GetLineAvatarType() LineAvatarType {
	if x != nil {
		return x.LineAvatarType
	}
	return LineAvatarType_LineAvatarType_MI
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelicMap          map[uint32]*Relic     `protobuf:"bytes,1,rep,name=relic_map,json=relicMap,proto3" json:"relic_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`             // 遗器
	EquipmentMap      map[uint32]*Equipment `protobuf:"bytes,2,rep,name=equipment_map,json=equipmentMap,proto3" json:"equipment_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 光锥
	MaterialMap       map[uint32]uint32     `protobuf:"bytes,3,rep,name=material_map,json=materialMap,proto3" json:"material_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 材料
	HeadIcon          []uint32              `protobuf:"varint,4,rep,packed,name=head_icon,json=headIcon,proto3" json:"head_icon,omitempty"`                                                                                              // 头像
	UnlockFormulaList []uint32              `protobuf:"varint,5,rep,packed,name=unlock_formula_list,json=unlockFormulaList,proto3" json:"unlock_formula_list,omitempty"`                                                                 // 解锁配方
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{12}
}

func (x *Item) GetRelicMap() map[uint32]*Relic {
	if x != nil {
		return x.RelicMap
	}
	return nil
}

func (x *Item) GetEquipmentMap() map[uint32]*Equipment {
	if x != nil {
		return x.EquipmentMap
	}
	return nil
}

func (x *Item) GetMaterialMap() map[uint32]uint32 {
	if x != nil {
		return x.MaterialMap
	}
	return nil
}

func (x *Item) GetHeadIcon() []uint32 {
	if x != nil {
		return x.HeadIcon
	}
	return nil
}

func (x *Item) GetUnlockFormulaList() []uint32 {
	if x != nil {
		return x.UnlockFormulaList
	}
	return nil
}

type Relic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid               uint32                 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                           // id
	UniqueId          uint32                 `protobuf:"varint,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"` // 唯一ID
	Exp               uint32                 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Level             uint32                 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	MainAffixId       uint32                 `protobuf:"varint,5,opt,name=main_affix_id,json=mainAffixId,proto3" json:"main_affix_id,omitempty"`                                                                                    // 主词条
	RelicAffix        map[uint32]*RelicAffix `protobuf:"bytes,6,rep,name=relic_affix,json=relicAffix,proto3" json:"relic_affix,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 词条 map[affix_id]RelicAffix
	BaseAvatarId      uint32                 `protobuf:"varint,7,opt,name=base_avatar_id,json=baseAvatarId,proto3" json:"base_avatar_id,omitempty"`                                                                                 // 装备角色
	IsProtected       bool                   `protobuf:"varint,8,opt,name=is_protected,json=isProtected,proto3" json:"is_protected,omitempty"`                                                                                      // 是否锁定
	MainAffixProperty string                 `protobuf:"bytes,9,opt,name=main_affix_property,json=mainAffixProperty,proto3" json:"main_affix_property,omitempty"`                                                                   //主词条类型
}

func (x *Relic) Reset() {
	*x = Relic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relic) ProtoMessage() {}

func (x *Relic) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relic.ProtoReflect.Descriptor instead.
func (*Relic) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{13}
}

func (x *Relic) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Relic) GetUniqueId() uint32 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *Relic) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Relic) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Relic) GetMainAffixId() uint32 {
	if x != nil {
		return x.MainAffixId
	}
	return 0
}

func (x *Relic) GetRelicAffix() map[uint32]*RelicAffix {
	if x != nil {
		return x.RelicAffix
	}
	return nil
}

func (x *Relic) GetBaseAvatarId() uint32 {
	if x != nil {
		return x.BaseAvatarId
	}
	return 0
}

func (x *Relic) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *Relic) GetMainAffixProperty() string {
	if x != nil {
		return x.MainAffixProperty
	}
	return ""
}

type RelicAffix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffixId uint32 `protobuf:"varint,1,opt,name=affix_id,json=affixId,proto3" json:"affix_id,omitempty"`
	Cnt     uint32 `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Step    uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *RelicAffix) Reset() {
	*x = RelicAffix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelicAffix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelicAffix) ProtoMessage() {}

func (x *RelicAffix) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelicAffix.ProtoReflect.Descriptor instead.
func (*RelicAffix) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{14}
}

func (x *RelicAffix) GetAffixId() uint32 {
	if x != nil {
		return x.AffixId
	}
	return 0
}

func (x *RelicAffix) GetCnt() uint32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *RelicAffix) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          uint32 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                           // id
	UniqueId     uint32 `protobuf:"varint,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"` // 唯一ID
	Exp          uint32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Level        uint32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Promotion    uint32 `protobuf:"varint,5,opt,name=promotion,proto3" json:"promotion,omitempty"`
	BaseAvatarId uint32 `protobuf:"varint,6,opt,name=base_avatar_id,json=baseAvatarId,proto3" json:"base_avatar_id,omitempty"` // 装备角色
	IsProtected  bool   `protobuf:"varint,7,opt,name=is_protected,json=isProtected,proto3" json:"is_protected,omitempty"`      // 是否锁定
	Rank         uint32 `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`                                       // 命座?
}

func (x *Equipment) Reset() {
	*x = Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equipment) ProtoMessage() {}

func (x *Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equipment.ProtoReflect.Descriptor instead.
func (*Equipment) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{15}
}

func (x *Equipment) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Equipment) GetUniqueId() uint32 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *Equipment) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *Equipment) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Equipment) GetPromotion() uint32 {
	if x != nil {
		return x.Promotion
	}
	return 0
}

func (x *Equipment) GetBaseAvatarId() uint32 {
	if x != nil {
		return x.BaseAvatarId
	}
	return 0
}

func (x *Equipment) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *Equipment) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid uint32 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"` // id
	Num uint32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` // 个数
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{16}
}

func (x *Material) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Material) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type Battle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType  `protobuf:"varint,1,opt,name=battle_type,json=battleType,proto3,enum=proto.BattleType" json:"battle_type,omitempty"` // 当前状态
	Rogue      *Rogue      `protobuf:"bytes,2,opt,name=rogue,proto3" json:"rogue,omitempty"`                                                    // 期数-情况
	Challenge  *Challenge  `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`                                            // 忘却之庭
	RogueTourn *RogueTourn `protobuf:"bytes,4,opt,name=rogue_tourn,json=rogueTourn,proto3" json:"rogue_tourn,omitempty"`                        // 差分宇宙
	Rain       *Raid       `protobuf:"bytes,5,opt,name=rain,proto3" json:"rain,omitempty"`                                                      // 副本
}

func (x *Battle) Reset() {
	*x = Battle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battle) ProtoMessage() {}

func (x *Battle) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battle.ProtoReflect.Descriptor instead.
func (*Battle) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{17}
}

func (x *Battle) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Battle_NONE
}

func (x *Battle) GetRogue() *Rogue {
	if x != nil {
		return x.Rogue
	}
	return nil
}

func (x *Battle) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *Battle) GetRogueTourn() *RogueTourn {
	if x != nil {
		return x.RogueTourn
	}
	return nil
}

func (x *Battle) GetRain() *Raid {
	if x != nil {
		return x.Rain
	}
	return nil
}

type Rogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RogueArea        map[uint32]*RogueArea    `protobuf:"bytes,1,rep,name=rogue_area,json=rogueArea,proto3" json:"rogue_area,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                        // 关卡状态
	CurRogue         *CurRogue                `protobuf:"bytes,2,opt,name=cur_rogue,json=curRogue,proto3" json:"cur_rogue,omitempty"`                                                                                                                    // 当前正在进行的
	RogueHistoryList map[uint32]*RogueHistory `protobuf:"bytes,3,rep,name=rogue_history_list,json=rogueHistoryList,proto3" json:"rogue_history_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 历史领取信息
}

func (x *Rogue) Reset() {
	*x = Rogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rogue) ProtoMessage() {}

func (x *Rogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rogue.ProtoReflect.Descriptor instead.
func (*Rogue) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{18}
}

func (x *Rogue) GetRogueArea() map[uint32]*RogueArea {
	if x != nil {
		return x.RogueArea
	}
	return nil
}

func (x *Rogue) GetCurRogue() *CurRogue {
	if x != nil {
		return x.CurRogue
	}
	return nil
}

func (x *Rogue) GetRogueHistoryList() map[uint32]*RogueHistory {
	if x != nil {
		return x.RogueHistoryList
	}
	return nil
}

type RogueArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId          uint32          `protobuf:"varint,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	RogueAreaStatus RogueAreaStatus `protobuf:"varint,2,opt,name=rogue_area_status,json=rogueAreaStatus,proto3,enum=proto.RogueAreaStatus" json:"rogue_area_status,omitempty"`
}

func (x *RogueArea) Reset() {
	*x = RogueArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueArea) ProtoMessage() {}

func (x *RogueArea) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueArea.ProtoReflect.Descriptor instead.
func (*RogueArea) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{19}
}

func (x *RogueArea) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *RogueArea) GetRogueAreaStatus() RogueAreaStatus {
	if x != nil {
		return x.RogueAreaStatus
	}
	return RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_LOCK
}

type CurRogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurAreaId             uint32                `protobuf:"varint,1,opt,name=cur_area_id,json=curAreaId,proto3" json:"cur_area_id,omitempty"`                                                                                                  // 当前关卡
	CurSiteId             uint32                `protobuf:"varint,2,opt,name=cur_siteId,json=curSiteId,proto3" json:"cur_siteId,omitempty"`                                                                                                    // 当前房间
	RogueRoomMap          map[uint32]*RogueRoom `protobuf:"bytes,3,rep,name=rogue_room_map,json=rogueRoomMap,proto3" json:"rogue_room_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 房间列表
	RogueMapId            uint32                `protobuf:"varint,4,opt,name=rogue_map_id,json=rogueMapId,proto3" json:"rogue_map_id,omitempty"`                                                                                               // mapid
	BuffNum               uint32                `protobuf:"varint,5,opt,name=buff_num,json=buffNum,proto3" json:"buff_num,omitempty"`                                                                                                          // buff// 计数器
	AeonId                uint32                `protobuf:"varint,6,opt,name=aeon_id,json=aeonId,proto3" json:"aeon_id,omitempty"`                                                                                                             // 命途
	BuffList              map[uint32]*RogueBuff `protobuf:"bytes,7,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // 模拟宇宙已获得祝福列表
	RogueActivityModuleID uint32                `protobuf:"varint,8,opt,name=RogueActivityModuleID,proto3" json:"RogueActivityModuleID,omitempty"`                                                                                             //模拟宇宙类型
	IsWin                 bool                  `protobuf:"varint,9,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`                                                                                                                // 是否胜利
	Status                RogueStatus           `protobuf:"varint,10,opt,name=status,proto3,enum=proto.RogueStatus" json:"status,omitempty"`                                                                                                   // 状态
}

func (x *CurRogue) Reset() {
	*x = CurRogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurRogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurRogue) ProtoMessage() {}

func (x *CurRogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurRogue.ProtoReflect.Descriptor instead.
func (*CurRogue) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{20}
}

func (x *CurRogue) GetCurAreaId() uint32 {
	if x != nil {
		return x.CurAreaId
	}
	return 0
}

func (x *CurRogue) GetCurSiteId() uint32 {
	if x != nil {
		return x.CurSiteId
	}
	return 0
}

func (x *CurRogue) GetRogueRoomMap() map[uint32]*RogueRoom {
	if x != nil {
		return x.RogueRoomMap
	}
	return nil
}

func (x *CurRogue) GetRogueMapId() uint32 {
	if x != nil {
		return x.RogueMapId
	}
	return 0
}

func (x *CurRogue) GetBuffNum() uint32 {
	if x != nil {
		return x.BuffNum
	}
	return 0
}

func (x *CurRogue) GetAeonId() uint32 {
	if x != nil {
		return x.AeonId
	}
	return 0
}

func (x *CurRogue) GetBuffList() map[uint32]*RogueBuff {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *CurRogue) GetRogueActivityModuleID() uint32 {
	if x != nil {
		return x.RogueActivityModuleID
	}
	return 0
}

func (x *CurRogue) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *CurRogue) GetStatus() RogueStatus {
	if x != nil {
		return x.Status
	}
	return RogueStatus_ROGUE_STATUS_NONE
}

type RogueRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId         uint32     `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomStatus     RoomStatus `protobuf:"varint,2,opt,name=room_status,json=roomStatus,proto3,enum=proto.RoomStatus" json:"room_status,omitempty"`
	NextSiteIdList []uint32   `protobuf:"varint,3,rep,packed,name=next_site_id_list,json=nextSiteIdList,proto3" json:"next_site_id_list,omitempty"`
}

func (x *RogueRoom) Reset() {
	*x = RogueRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueRoom) ProtoMessage() {}

func (x *RogueRoom) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueRoom.ProtoReflect.Descriptor instead.
func (*RogueRoom) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{21}
}

func (x *RogueRoom) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RogueRoom) GetRoomStatus() RoomStatus {
	if x != nil {
		return x.RoomStatus
	}
	return RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_NONE
}

func (x *RogueRoom) GetNextSiteIdList() []uint32 {
	if x != nil {
		return x.NextSiteIdList
	}
	return nil
}

type RogueBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId    uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	BuffLevel uint32 `protobuf:"varint,2,opt,name=buff_level,json=buffLevel,proto3" json:"buff_level,omitempty"`
}

func (x *RogueBuff) Reset() {
	*x = RogueBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueBuff) ProtoMessage() {}

func (x *RogueBuff) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueBuff.ProtoReflect.Descriptor instead.
func (*RogueBuff) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{22}
}

func (x *RogueBuff) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *RogueBuff) GetBuffLevel() uint32 {
	if x != nil {
		return x.BuffLevel
	}
	return 0
}

type RogueHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId uint32 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"` // 期数
	Score    uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                       // 分数
}

func (x *RogueHistory) Reset() {
	*x = RogueHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueHistory) ProtoMessage() {}

func (x *RogueHistory) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueHistory.ProtoReflect.Descriptor instead.
func (*RogueHistory) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{23}
}

func (x *RogueHistory) GetSeasonId() uint32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RogueHistory) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type RogueTourn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp                    uint32                             `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                                                               // 经验
	TakenLevelRewards      []uint32                           `protobuf:"varint,2,rep,packed,name=taken_level_rewards,json=takenLevelRewards,proto3" json:"taken_level_rewards,omitempty"`                                                                                                 // 已领取的等级奖励
	InspirationCircuitInfo map[uint32]*InspirationCircuitInfo `protobuf:"bytes,3,rep,name=inspiration_circuit_info,json=inspirationCircuitInfo,proto3" json:"inspiration_circuit_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 灵感回路信息
	UnlockDifficultyInfo   []uint32                           `protobuf:"varint,4,rep,packed,name=unlock_difficulty_info,json=unlockDifficultyInfo,proto3" json:"unlock_difficulty_info,omitempty"`                                                                                        // 已解锁难度
	CurRogueTourn          *CurRogueTourn                     `protobuf:"bytes,5,opt,name=cur_rogue_tourn,json=curRogueTourn,proto3" json:"cur_rogue_tourn,omitempty"`                                                                                                                     // 当前差分宇宙
}

func (x *RogueTourn) Reset() {
	*x = RogueTourn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueTourn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueTourn) ProtoMessage() {}

func (x *RogueTourn) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueTourn.ProtoReflect.Descriptor instead.
func (*RogueTourn) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{24}
}

func (x *RogueTourn) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RogueTourn) GetTakenLevelRewards() []uint32 {
	if x != nil {
		return x.TakenLevelRewards
	}
	return nil
}

func (x *RogueTourn) GetInspirationCircuitInfo() map[uint32]*InspirationCircuitInfo {
	if x != nil {
		return x.InspirationCircuitInfo
	}
	return nil
}

func (x *RogueTourn) GetUnlockDifficultyInfo() []uint32 {
	if x != nil {
		return x.UnlockDifficultyInfo
	}
	return nil
}

func (x *RogueTourn) GetCurRogueTourn() *CurRogueTourn {
	if x != nil {
		return x.CurRogueTourn
	}
	return nil
}

type InspirationCircuitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InspirationCircuitId uint32            `protobuf:"varint,1,opt,name=inspiration_circuit_id,json=inspirationCircuitId,proto3" json:"inspiration_circuit_id,omitempty"`
	Status               RogueTalentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=proto.RogueTalentStatus" json:"status,omitempty"`
}

func (x *InspirationCircuitInfo) Reset() {
	*x = InspirationCircuitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspirationCircuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspirationCircuitInfo) ProtoMessage() {}

func (x *InspirationCircuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspirationCircuitInfo.ProtoReflect.Descriptor instead.
func (*InspirationCircuitInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{25}
}

func (x *InspirationCircuitInfo) GetInspirationCircuitId() uint32 {
	if x != nil {
		return x.InspirationCircuitId
	}
	return 0
}

func (x *InspirationCircuitInfo) GetStatus() RogueTalentStatus {
	if x != nil {
		return x.Status
	}
	return RogueTalentStatus_ROGUE_TALENT_STATUS_LOCK
}

type CurRogueTourn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId        uint32                `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`                                                                                                             // 关卡
	FormulaList   []uint32              `protobuf:"varint,2,rep,packed,name=formula_list,json=formulaList,proto3" json:"formula_list,omitempty"`                                                                                       //方程列表
	CurLayerList  map[uint32]*LayerInfo `protobuf:"bytes,3,rep,name=cur_layer_list,json=curLayerList,proto3" json:"cur_layer_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 关卡列表
	CurLayerIndex uint32                `protobuf:"varint,4,opt,name=cur_layer_index,json=curLayerIndex,proto3" json:"cur_layer_index,omitempty"`                                                                                      //第几关当前
}

func (x *CurRogueTourn) Reset() {
	*x = CurRogueTourn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurRogueTourn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurRogueTourn) ProtoMessage() {}

func (x *CurRogueTourn) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurRogueTourn.ProtoReflect.Descriptor instead.
func (*CurRogueTourn) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{26}
}

func (x *CurRogueTourn) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *CurRogueTourn) GetFormulaList() []uint32 {
	if x != nil {
		return x.FormulaList
	}
	return nil
}

func (x *CurRogueTourn) GetCurLayerList() map[uint32]*LayerInfo {
	if x != nil {
		return x.CurLayerList
	}
	return nil
}

func (x *CurRogueTourn) GetCurLayerIndex() uint32 {
	if x != nil {
		return x.CurLayerIndex
	}
	return 0
}

type LayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayerId            uint32                         `protobuf:"varint,1,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`                                                                                                                              //小关卡id
	Status             RogueTournLayerStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=proto.RogueTournLayerStatus" json:"status,omitempty"`                                                                                                              // 状态
	LayerIndex         uint32                         `protobuf:"varint,3,opt,name=layer_index,json=layerIndex,proto3" json:"layer_index,omitempty"`                                                                                                                     //第几个小房间
	RogueTournRoomList map[uint32]*RogueTournRoomInfo `protobuf:"bytes,4,rep,name=rogue_tourn_room_list,json=rogueTournRoomList,proto3" json:"rogue_tourn_room_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 小关卡下属房间
	CurRoomIndex       uint32                         `protobuf:"varint,5,opt,name=cur_room_index,json=curRoomIndex,proto3" json:"cur_room_index,omitempty"`                                                                                                             // 第几个房间当前
}

func (x *LayerInfo) Reset() {
	*x = LayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerInfo) ProtoMessage() {}

func (x *LayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerInfo.ProtoReflect.Descriptor instead.
func (*LayerInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{27}
}

func (x *LayerInfo) GetLayerId() uint32 {
	if x != nil {
		return x.LayerId
	}
	return 0
}

func (x *LayerInfo) GetStatus() RogueTournLayerStatus {
	if x != nil {
		return x.Status
	}
	return RogueTournLayerStatus_ROGUE_TOURN_LAYER_STATUS_NONE
}

func (x *LayerInfo) GetLayerIndex() uint32 {
	if x != nil {
		return x.LayerIndex
	}
	return 0
}

func (x *LayerInfo) GetRogueTournRoomList() map[uint32]*RogueTournRoomInfo {
	if x != nil {
		return x.RogueTournRoomList
	}
	return nil
}

func (x *LayerInfo) GetCurRoomIndex() uint32 {
	if x != nil {
		return x.CurRoomIndex
	}
	return 0
}

type RogueTournRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId    uint32               `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                   //id
	RoomIndex uint32               `protobuf:"varint,2,opt,name=room_index,json=roomIndex,proto3" json:"room_index,omitempty"`          //第几个房间
	Status    RogueTournRoomStatus `protobuf:"varint,3,opt,name=status,proto3,enum=proto.RogueTournRoomStatus" json:"status,omitempty"` // 状态
}

func (x *RogueTournRoomInfo) Reset() {
	*x = RogueTournRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueTournRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueTournRoomInfo) ProtoMessage() {}

func (x *RogueTournRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueTournRoomInfo.ProtoReflect.Descriptor instead.
func (*RogueTournRoomInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{28}
}

func (x *RogueTournRoomInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RogueTournRoomInfo) GetRoomIndex() uint32 {
	if x != nil {
		return x.RoomIndex
	}
	return 0
}

func (x *RogueTournRoomInfo) GetStatus() RogueTournRoomStatus {
	if x != nil {
		return x.Status
	}
	return RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_NONE
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeList       map[uint32]*ChallengeList `protobuf:"bytes,1,rep,name=challenge_list,json=challengeList,proto3" json:"challenge_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 通关状态
	ChallengeRewardList map[uint64]uint32         `protobuf:"bytes,2,rep,name=challenge_reward_list,json=challengeRewardList,proto3" json:"challenge_reward_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurChallenge        *CurChallenge             `protobuf:"bytes,3,opt,name=cur_challenge,json=curChallenge,proto3" json:"cur_challenge,omitempty"` // 当前战斗状态
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{29}
}

func (x *Challenge) GetChallengeList() map[uint32]*ChallengeList {
	if x != nil {
		return x.ChallengeList
	}
	return nil
}

func (x *Challenge) GetChallengeRewardList() map[uint64]uint32 {
	if x != nil {
		return x.ChallengeRewardList
	}
	return nil
}

func (x *Challenge) GetCurChallenge() *CurChallenge {
	if x != nil {
		return x.CurChallenge
	}
	return nil
}

type ChallengeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stars    uint32 `protobuf:"varint,1,opt,name=stars,proto3" json:"stars,omitempty"`                       // 星数
	ScoreOne uint32 `protobuf:"varint,2,opt,name=score_one,json=scoreOne,proto3" json:"score_one,omitempty"` // 第一关得分
	ScoreTwo uint32 `protobuf:"varint,3,opt,name=score_two,json=scoreTwo,proto3" json:"score_two,omitempty"` // 第二关得分
}

func (x *ChallengeList) Reset() {
	*x = ChallengeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeList) ProtoMessage() {}

func (x *ChallengeList) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeList.ProtoReflect.Descriptor instead.
func (*ChallengeList) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{30}
}

func (x *ChallengeList) GetStars() uint32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *ChallengeList) GetScoreOne() uint32 {
	if x != nil {
		return x.ScoreOne
	}
	return 0
}

func (x *ChallengeList) GetScoreTwo() uint32 {
	if x != nil {
		return x.ScoreTwo
	}
	return 0
}

type CurChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId uint32          `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`  //挑战id
	StageNum    uint32          `protobuf:"varint,2,opt,name=stage_num,json=stageNum,proto3" json:"stage_num,omitempty"`           // 总共需要挑战数
	CurStage    uint32          `protobuf:"varint,3,opt,name=cur_stage,json=curStage,proto3" json:"cur_stage,omitempty"`           // 当前挑战
	Status      ChallengeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=proto.ChallengeStatus" json:"status,omitempty"`    // 状态
	RoundCount  uint32          `protobuf:"varint,5,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`     // 已使用回合数
	Stars       uint32          `protobuf:"varint,6,opt,name=stars,proto3" json:"stars,omitempty"`                                 // 得分
	ScoreOne    uint32          `protobuf:"varint,7,opt,name=score_one,json=scoreOne,proto3" json:"score_one,omitempty"`           // 第一层得分
	ScoreTwo    uint32          `protobuf:"varint,8,opt,name=score_two,json=scoreTwo,proto3" json:"score_two,omitempty"`           // 第二层得分
	IsWin       bool            `protobuf:"varint,9,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`                    // 是否赢
	DeadAvatar  uint32          `protobuf:"varint,10,opt,name=dead_avatar,json=deadAvatar,proto3" json:"dead_avatar,omitempty"`    // 死亡角色数
	BuffOne     uint32          `protobuf:"varint,11,opt,name=buff_one,json=buffOne,proto3" json:"buff_one,omitempty"`             // 第一关buff
	BuffTwo     uint32          `protobuf:"varint,12,opt,name=buff_two,json=buffTwo,proto3" json:"buff_two,omitempty"`             // 第二关buff
	KillMonster uint32          `protobuf:"varint,13,opt,name=kill_monster,json=killMonster,proto3" json:"kill_monster,omitempty"` // 当前关卡已杀死怪物数量
	MazeBuffId  uint32          `protobuf:"varint,14,opt,name=maze_buff_id,json=mazeBuffId,proto3" json:"maze_buff_id,omitempty"`  //地图buff
	IsBoos      bool            `protobuf:"varint,15,opt,name=is_boos,json=isBoos,proto3" json:"is_boos,omitempty"`                // 是否末日之影
}

func (x *CurChallenge) Reset() {
	*x = CurChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurChallenge) ProtoMessage() {}

func (x *CurChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurChallenge.ProtoReflect.Descriptor instead.
func (*CurChallenge) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{31}
}

func (x *CurChallenge) GetChallengeId() uint32 {
	if x != nil {
		return x.ChallengeId
	}
	return 0
}

func (x *CurChallenge) GetStageNum() uint32 {
	if x != nil {
		return x.StageNum
	}
	return 0
}

func (x *CurChallenge) GetCurStage() uint32 {
	if x != nil {
		return x.CurStage
	}
	return 0
}

func (x *CurChallenge) GetStatus() ChallengeStatus {
	if x != nil {
		return x.Status
	}
	return ChallengeStatus_CHALLENGE_UNKNOWN
}

func (x *CurChallenge) GetRoundCount() uint32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *CurChallenge) GetStars() uint32 {
	if x != nil {
		return x.Stars
	}
	return 0
}

func (x *CurChallenge) GetScoreOne() uint32 {
	if x != nil {
		return x.ScoreOne
	}
	return 0
}

func (x *CurChallenge) GetScoreTwo() uint32 {
	if x != nil {
		return x.ScoreTwo
	}
	return 0
}

func (x *CurChallenge) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *CurChallenge) GetDeadAvatar() uint32 {
	if x != nil {
		return x.DeadAvatar
	}
	return 0
}

func (x *CurChallenge) GetBuffOne() uint32 {
	if x != nil {
		return x.BuffOne
	}
	return 0
}

func (x *CurChallenge) GetBuffTwo() uint32 {
	if x != nil {
		return x.BuffTwo
	}
	return 0
}

func (x *CurChallenge) GetKillMonster() uint32 {
	if x != nil {
		return x.KillMonster
	}
	return 0
}

func (x *CurChallenge) GetMazeBuffId() uint32 {
	if x != nil {
		return x.MazeBuffId
	}
	return 0
}

func (x *CurChallenge) GetIsBoos() bool {
	if x != nil {
		return x.IsBoos
	}
	return false
}

type Raid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurRaidId     uint32               `protobuf:"varint,1,opt,name=cur_raid_id,json=curRaidId,proto3" json:"cur_raid_id,omitempty"`                                                                                                     //当前关卡
	RaidMap       map[uint32]*RaidInfo `protobuf:"bytes,2,rep,name=raid_map,json=raidMap,proto3" json:"raid_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                     // 关卡列表
	FinishRaidMap map[uint32]*RaidInfo `protobuf:"bytes,3,rep,name=finish_raid_map,json=finishRaidMap,proto3" json:"finish_raid_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 已完成的关卡列表
}

func (x *Raid) Reset() {
	*x = Raid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raid) ProtoMessage() {}

func (x *Raid) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raid.ProtoReflect.Descriptor instead.
func (*Raid) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{32}
}

func (x *Raid) GetCurRaidId() uint32 {
	if x != nil {
		return x.CurRaidId
	}
	return 0
}

func (x *Raid) GetRaidMap() map[uint32]*RaidInfo {
	if x != nil {
		return x.RaidMap
	}
	return nil
}

func (x *Raid) GetFinishRaidMap() map[uint32]*RaidInfo {
	if x != nil {
		return x.FinishRaidMap
	}
	return nil
}

type RaidInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaidId     uint32     `protobuf:"varint,1,opt,name=raid_id,json=raidId,proto3" json:"raid_id,omitempty"`             //关卡id
	HardLevel  uint32     `protobuf:"varint,2,opt,name=hard_level,json=hardLevel,proto3" json:"hard_level,omitempty"`    // 难度
	EntryId    uint32     `protobuf:"varint,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`          // 场景
	Status     RaidStatus `protobuf:"varint,4,opt,name=status,proto3,enum=proto.RaidStatus" json:"status,omitempty"`     //状态
	Pos        *VectorBin `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`                                  // 坐标
	Rot        *VectorBin `protobuf:"bytes,6,opt,name=rot,proto3" json:"rot,omitempty"`                                  // 朝向
	FinishTime uint64     `protobuf:"varint,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"` // 完成时间
}

func (x *RaidInfo) Reset() {
	*x = RaidInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidInfo) ProtoMessage() {}

func (x *RaidInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidInfo.ProtoReflect.Descriptor instead.
func (*RaidInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{33}
}

func (x *RaidInfo) GetRaidId() uint32 {
	if x != nil {
		return x.RaidId
	}
	return 0
}

func (x *RaidInfo) GetHardLevel() uint32 {
	if x != nil {
		return x.HardLevel
	}
	return 0
}

func (x *RaidInfo) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *RaidInfo) GetStatus() RaidStatus {
	if x != nil {
		return x.Status
	}
	return RaidStatus_RAID_STATUS_NONE
}

func (x *RaidInfo) GetPos() *VectorBin {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *RaidInfo) GetRot() *VectorBin {
	if x != nil {
		return x.Rot
	}
	return nil
}

func (x *RaidInfo) GetFinishTime() uint64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

type Gacha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GachaMap map[uint32]*GachaNum `protobuf:"bytes,1,rep,name=gacha_map,json=gachaMap,proto3" json:"gacha_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // [GachaType]*CeilingNum
}

func (x *Gacha) Reset() {
	*x = Gacha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gacha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gacha) ProtoMessage() {}

func (x *Gacha) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gacha.ProtoReflect.Descriptor instead.
func (*Gacha) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{34}
}

func (x *Gacha) GetGachaMap() map[uint32]*GachaNum {
	if x != nil {
		return x.GachaMap
	}
	return nil
}

type GachaNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CeilingNum               uint32 `protobuf:"varint,1,opt,name=ceiling_num,json=ceilingNum,proto3" json:"ceiling_num,omitempty"` // 抽取次数
	Pity4                    uint32 `protobuf:"varint,2,opt,name=pity4,proto3" json:"pity4,omitempty"`                             // 几抽未四星up
	FailedFeaturedItemPulls4 bool   `protobuf:"varint,3,opt,name=failed_featured_item_pulls4,json=failedFeaturedItemPulls4,proto3" json:"failed_featured_item_pulls4,omitempty"`
	FailedFeaturedItemPulls5 bool   `protobuf:"varint,4,opt,name=failed_featured_item_pulls5,json=failedFeaturedItemPulls5,proto3" json:"failed_featured_item_pulls5,omitempty"` // 是否保底
}

func (x *GachaNum) Reset() {
	*x = GachaNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GachaNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaNum) ProtoMessage() {}

func (x *GachaNum) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaNum.ProtoReflect.Descriptor instead.
func (*GachaNum) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{35}
}

func (x *GachaNum) GetCeilingNum() uint32 {
	if x != nil {
		return x.CeilingNum
	}
	return 0
}

func (x *GachaNum) GetPity4() uint32 {
	if x != nil {
		return x.Pity4
	}
	return 0
}

func (x *GachaNum) GetFailedFeaturedItemPulls4() bool {
	if x != nil {
		return x.FailedFeaturedItemPulls4
	}
	return false
}

func (x *GachaNum) GetFailedFeaturedItemPulls5() bool {
	if x != nil {
		return x.FailedFeaturedItemPulls5
	}
	return false
}

type ContentAuditBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                             // 内容
	AuditState  uint32 `protobuf:"varint,2,opt,name=audit_state,json=auditState,proto3" json:"audit_state,omitempty"`    // 审核状态
	SubmitTime  uint32 `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`    // 提交时间
	SubmitCount uint32 `protobuf:"varint,4,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"` // 提交计数
}

func (x *ContentAuditBin) Reset() {
	*x = ContentAuditBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAuditBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAuditBin) ProtoMessage() {}

func (x *ContentAuditBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAuditBin.ProtoReflect.Descriptor instead.
func (*ContentAuditBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{36}
}

func (x *ContentAuditBin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContentAuditBin) GetAuditState() uint32 {
	if x != nil {
		return x.AuditState
	}
	return 0
}

func (x *ContentAuditBin) GetSubmitTime() uint32 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *ContentAuditBin) GetSubmitCount() uint32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

type Mail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailList map[uint32]*MailDts `protobuf:"bytes,1,rep,name=MailList,proto3" json:"MailList,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 已领取邮件
}

func (x *Mail) Reset() {
	*x = Mail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mail) ProtoMessage() {}

func (x *Mail) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mail.ProtoReflect.Descriptor instead.
func (*Mail) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{37}
}

func (x *Mail) GetMailList() map[uint32]*MailDts {
	if x != nil {
		return x.MailList
	}
	return nil
}

type MailDts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId uint32 `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"` //邮件id
	IsDel  bool   `protobuf:"varint,2,opt,name=is_del,json=isDel,proto3" json:"is_del,omitempty"`    // 是否删除
	IsRead bool   `protobuf:"varint,3,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"` // 是否领取
}

func (x *MailDts) Reset() {
	*x = MailDts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailDts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailDts) ProtoMessage() {}

func (x *MailDts) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailDts.ProtoReflect.Descriptor instead.
func (*MailDts) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{38}
}

func (x *MailDts) GetMailId() uint32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *MailDts) GetIsDel() bool {
	if x != nil {
		return x.IsDel
	}
	return false
}

func (x *MailDts) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type PlayerFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendList map[uint32]*Friend `protobuf:"bytes,1,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 好友列表
}

func (x *PlayerFriend) Reset() {
	*x = PlayerFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFriend) ProtoMessage() {}

func (x *PlayerFriend) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFriend.ProtoReflect.Descriptor instead.
func (*PlayerFriend) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{39}
}

func (x *PlayerFriend) GetFriendList() map[uint32]*Friend {
	if x != nil {
		return x.FriendList
	}
	return nil
}

type Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                // 好友uid
	IsMarked   bool   `protobuf:"varint,2,opt,name=is_marked,json=isMarked,proto3" json:"is_marked,omitempty"`      // 是否关注
	RemarkName string `protobuf:"bytes,3,opt,name=remark_name,json=remarkName,proto3" json:"remark_name,omitempty"` // 备注
}

func (x *Friend) Reset() {
	*x = Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{40}
}

func (x *Friend) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Friend) GetIsMarked() bool {
	if x != nil {
		return x.IsMarked
	}
	return false
}

func (x *Friend) GetRemarkName() string {
	if x != nil {
		return x.RemarkName
	}
	return ""
}

type Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainMission *MainMission `protobuf:"bytes,1,opt,name=main_mission,json=mainMission,proto3" json:"main_mission,omitempty"` //主线任务
}

func (x *Mission) Reset() {
	*x = Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mission) ProtoMessage() {}

func (x *Mission) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mission.ProtoReflect.Descriptor instead.
func (*Mission) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{41}
}

func (x *Mission) GetMainMission() *MainMission {
	if x != nil {
		return x.MainMission
	}
	return nil
}

type MainMission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainMissionList       map[uint32]*MissionInfo `protobuf:"bytes,1,rep,name=main_mission_list,json=mainMissionList,proto3" json:"main_mission_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                     // 主任务
	SubMissionList        map[uint32]*MissionInfo `protobuf:"bytes,2,rep,name=sub_mission_list,json=subMissionList,proto3" json:"sub_mission_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                        // 子任务
	FinishMainMissionList map[uint32]*MissionInfo `protobuf:"bytes,3,rep,name=finish_main_mission_list,json=finishMainMissionList,proto3" json:"finish_main_mission_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 已完成的主任务
	FinishSubMissionList  map[uint32]*MissionInfo `protobuf:"bytes,4,rep,name=finish_sub_mission_list,json=finishSubMissionList,proto3" json:"finish_sub_mission_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`    // 已完成子任务
}

func (x *MainMission) Reset() {
	*x = MainMission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainMission) ProtoMessage() {}

func (x *MainMission) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainMission.ProtoReflect.Descriptor instead.
func (*MainMission) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{42}
}

func (x *MainMission) GetMainMissionList() map[uint32]*MissionInfo {
	if x != nil {
		return x.MainMissionList
	}
	return nil
}

func (x *MainMission) GetSubMissionList() map[uint32]*MissionInfo {
	if x != nil {
		return x.SubMissionList
	}
	return nil
}

func (x *MainMission) GetFinishMainMissionList() map[uint32]*MissionInfo {
	if x != nil {
		return x.FinishMainMissionList
	}
	return nil
}

func (x *MainMission) GetFinishSubMissionList() map[uint32]*MissionInfo {
	if x != nil {
		return x.FinishSubMissionList
	}
	return nil
}

type MissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId          uint32                `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`   //任务id
	Progress           uint32                `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`                      // 步骤
	Status             MissionStatus         `protobuf:"varint,4,opt,name=status,proto3,enum=proto.MissionStatus" json:"status,omitempty"` // 任务状态
	MissionCustomValue []*MissionCustomValue `protobuf:"bytes,5,rep,name=mission_custom_value,json=missionCustomValue,proto3" json:"mission_custom_value,omitempty"`
}

func (x *MissionInfo) Reset() {
	*x = MissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo) ProtoMessage() {}

func (x *MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo.ProtoReflect.Descriptor instead.
func (*MissionInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{43}
}

func (x *MissionInfo) GetMissionId() uint32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *MissionInfo) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *MissionInfo) GetStatus() MissionStatus {
	if x != nil {
		return x.Status
	}
	return MissionStatus_MISSION_NONE
}

func (x *MissionInfo) GetMissionCustomValue() []*MissionCustomValue {
	if x != nil {
		return x.MissionCustomValue
	}
	return nil
}

type MissionCustomValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CustomValue uint32 `protobuf:"varint,2,opt,name=customValue,proto3" json:"customValue,omitempty"`
}

func (x *MissionCustomValue) Reset() {
	*x = MissionCustomValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionCustomValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionCustomValue) ProtoMessage() {}

func (x *MissionCustomValue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionCustomValue.ProtoReflect.Descriptor instead.
func (*MissionCustomValue) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{44}
}

func (x *MissionCustomValue) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MissionCustomValue) GetCustomValue() uint32 {
	if x != nil {
		return x.CustomValue
	}
	return 0
}

type TutorialDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tutorial      map[uint32]*TutorialInfo `protobuf:"bytes,1,rep,name=Tutorial,proto3" json:"Tutorial,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TutorialGuide map[uint32]*TutorialInfo `protobuf:"bytes,2,rep,name=TutorialGuide,proto3" json:"TutorialGuide,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TutorialDb) Reset() {
	*x = TutorialDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialDb) ProtoMessage() {}

func (x *TutorialDb) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialDb.ProtoReflect.Descriptor instead.
func (*TutorialDb) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{45}
}

func (x *TutorialDb) GetTutorial() map[uint32]*TutorialInfo {
	if x != nil {
		return x.Tutorial
	}
	return nil
}

func (x *TutorialDb) GetTutorialGuide() map[uint32]*TutorialInfo {
	if x != nil {
		return x.TutorialGuide
	}
	return nil
}

type TutorialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status TutorialStatus `protobuf:"varint,2,opt,name=status,proto3,enum=proto.TutorialStatus" json:"status,omitempty"`
}

func (x *TutorialInfo) Reset() {
	*x = TutorialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialInfo) ProtoMessage() {}

func (x *TutorialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialInfo.ProtoReflect.Descriptor instead.
func (*TutorialInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{46}
}

func (x *TutorialInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TutorialInfo) GetStatus() TutorialStatus {
	if x != nil {
		return x.Status
	}
	return TutorialStatus_TUTORIAL_NONE
}

type MessageGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId          uint32                     `protobuf:"varint,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	Id                 uint32                     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	MessageSectionList map[uint32]*MessageSection `protobuf:"bytes,3,rep,name=message_section_list,json=messageSectionList,proto3" json:"message_section_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RefreshTime        int64                      `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	Status             MessageGroupStatus         `protobuf:"varint,5,opt,name=status,proto3,enum=proto.MessageGroupStatus" json:"status,omitempty"`
}

func (x *MessageGroup) Reset() {
	*x = MessageGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageGroup) ProtoMessage() {}

func (x *MessageGroup) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageGroup.ProtoReflect.Descriptor instead.
func (*MessageGroup) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{47}
}

func (x *MessageGroup) GetContactId() uint32 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *MessageGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageGroup) GetMessageSectionList() map[uint32]*MessageSection {
	if x != nil {
		return x.MessageSectionList
	}
	return nil
}

func (x *MessageGroup) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *MessageGroup) GetStatus() MessageGroupStatus {
	if x != nil {
		return x.Status
	}
	return MessageGroupStatus_MESSAGE_GROUP_NONE
}

type MessageSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status MessageSectionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=proto.MessageSectionStatus" json:"status,omitempty"`
}

func (x *MessageSection) Reset() {
	*x = MessageSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSection) ProtoMessage() {}

func (x *MessageSection) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSection.ProtoReflect.Descriptor instead.
func (*MessageSection) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{48}
}

func (x *MessageSection) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageSection) GetStatus() MessageSectionStatus {
	if x != nil {
		return x.Status
	}
	return MessageSectionStatus_MESSAGE_SECTION_NONE
}

type BlockBin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId   uint32                `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`                                                                                               // 地图
	BlockList map[uint32]*BlockList `protobuf:"bytes,2,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 区块信息
}

func (x *BlockBin) Reset() {
	*x = BlockBin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBin) ProtoMessage() {}

func (x *BlockBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBin.ProtoReflect.Descriptor instead.
func (*BlockBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{49}
}

func (x *BlockBin) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *BlockBin) GetBlockList() map[uint32]*BlockList {
	if x != nil {
		return x.BlockList
	}
	return nil
}

type BlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropInfo map[uint32]*PropInfo `protobuf:"bytes,1,rep,name=prop_info,json=propInfo,proto3" json:"prop_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 物品实体信息
}

func (x *BlockList) Reset() {
	*x = BlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockList) ProtoMessage() {}

func (x *BlockList) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockList.ProtoReflect.Descriptor instead.
func (*BlockList) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{50}
}

func (x *BlockList) GetPropInfo() map[uint32]*PropInfo {
	if x != nil {
		return x.PropInfo
	}
	return nil
}

type PropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstId    uint32 `protobuf:"varint,1,opt,name=inst_id,json=instId,proto3" json:"inst_id,omitempty"`          // instid
	PropId    uint32 `protobuf:"varint,2,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`          // propid
	PropState uint32 `protobuf:"varint,3,opt,name=prop_state,json=propState,proto3" json:"prop_state,omitempty"` // 状态
}

func (x *PropInfo) Reset() {
	*x = PropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bin_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropInfo) ProtoMessage() {}

func (x *PropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropInfo.ProtoReflect.Descriptor instead.
func (*PropInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{51}
}

func (x *PropInfo) GetInstId() uint32 {
	if x != nil {
		return x.InstId
	}
	return 0
}

func (x *PropInfo) GetPropId() uint32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *PropInfo) GetPropState() uint32 {
	if x != nil {
		return x.PropState
	}
	return 0
}

var File_bin_server_proto protoreflect.FileDescriptor

var file_bin_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x0f, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x05, 0x67, 0x61, 0x63, 0x68, 0x61, 0x12, 0x25, 0x0a,
	0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x62, 0x52, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x5d, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x12, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x10, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x1a, 0x40, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x21, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4f, 0x0a, 0x0f, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x15, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbf, 0x04, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x70, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x53, 0x70, 0x42, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x70, 0x42, 0x61, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x6b, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x66, 0x0a, 0x1c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x02, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x74, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3c, 0x0a,
	0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74,
	0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x52, 0x65, 0x6c, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x53, 0x70, 0x42, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x5f, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75, 0x72, 0x53, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x22, 0x41, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x35, 0x0a, 0x09, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x7a, 0x22, 0xe4, 0x02, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x3f,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x55, 0x70, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4a, 0x0a, 0x0f,
	0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x56, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x6c,
	0x69, 0x63, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69,
	0x63, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x49, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x51, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x03, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x78, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x69, 0x63, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x6c,
	0x69, 0x63, 0x41, 0x66, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65,
	0x6c, 0x69, 0x63, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x1a, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x41, 0x66, 0x66, 0x69, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x6c, 0x69, 0x63, 0x41, 0x66, 0x66, 0x69, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x41, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x66, 0x66, 0x69, 0x78, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x22, 0xdd, 0x01, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x22, 0x2e, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x0a, 0x72,
	0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x69, 0x64, 0x52, 0x04, 0x72, 0x61, 0x69, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x05, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x2c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x50,
	0x0a, 0x12, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x4e, 0x0a, 0x0e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x09, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x11, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbf, 0x04, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0e, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75,
	0x66, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x65, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x51, 0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x41, 0x0a, 0x0c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x0a, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x1a, 0x68, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x16,
	0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94,
	0x02, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0x51, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x02, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x15, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x60, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90,
	0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x1a, 0x56, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x77, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x77, 0x6f, 0x22, 0xd8, 0x03, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x77,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x77,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x65, 0x61, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x66,
	0x66, 0x4f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x77, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x54, 0x77, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x7a, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x7a, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x73, 0x22, 0xc3, 0x02,
	0x0a, 0x04, 0x52, 0x61, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x61,
	0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x52, 0x61, 0x69, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x69, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69,
	0x64, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x61, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x61, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x1a, 0x4b, 0x0a, 0x0c, 0x52, 0x61, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x51, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x61, 0x69, 0x64, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x63, 0x68, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x67, 0x61, 0x63, 0x68, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x4c, 0x0a, 0x0d, 0x47, 0x61,
	0x63, 0x68, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x4e, 0x75, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x63,
	0x68, 0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x65, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x79, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x74, 0x79, 0x34, 0x12, 0x3d, 0x0a, 0x1b,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x6c, 0x6c, 0x73, 0x34, 0x12, 0x3d, 0x0a, 0x1b, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x6c, 0x6c, 0x73, 0x35, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4b, 0x0a,
	0x0d, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x07, 0x4d, 0x61,
	0x69, 0x6c, 0x44, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x44, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4c, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a,
	0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xeb, 0x05, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d,
	0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x17, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x56, 0x0a, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x69, 0x6e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5b, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x75, 0x62, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01,
	0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0a, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x62,
	0x12, 0x3b, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x62, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4a, 0x0a,
	0x0d, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x62, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x1a, 0x50, 0x0a, 0x0d, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x12, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4d, 0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xd0, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x5c, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x08,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x4e, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4c, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_proto_rawDescOnce sync.Once
	file_bin_server_proto_rawDescData = file_bin_server_proto_rawDesc
)

func file_bin_server_proto_rawDescGZIP() []byte {
	file_bin_server_proto_rawDescOnce.Do(func() {
		file_bin_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_proto_rawDescData)
	})
	return file_bin_server_proto_rawDescData
}

var file_bin_server_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_bin_server_proto_goTypes = []interface{}{
	(*PlayerBasicCompBin)(nil),     // 0: proto.PlayerBasicCompBin
	(*Activity)(nil),               // 1: proto.Activity
	(*Scene)(nil),                  // 2: proto.Scene
	(*Avatar)(nil),                 // 3: proto.Avatar
	(*AvatarBin)(nil),              // 4: proto.AvatarBin
	(*MultiPathAvatarInfo)(nil),    // 5: proto.MultiPathAvatarInfo
	(*AvatarSpBarInfo)(nil),        // 6: proto.AvatarSpBarInfo
	(*AvatarSkillBin)(nil),         // 7: proto.AvatarSkillBin
	(*VectorBin)(nil),              // 8: proto.VectorBin
	(*LineUp)(nil),                 // 9: proto.LineUp
	(*Line)(nil),                   // 10: proto.Line
	(*LineAvatarList)(nil),         // 11: proto.LineAvatarList
	(*Item)(nil),                   // 12: proto.Item
	(*Relic)(nil),                  // 13: proto.Relic
	(*RelicAffix)(nil),             // 14: proto.RelicAffix
	(*Equipment)(nil),              // 15: proto.Equipment
	(*Material)(nil),               // 16: proto.Material
	(*Battle)(nil),                 // 17: proto.Battle
	(*Rogue)(nil),                  // 18: proto.Rogue
	(*RogueArea)(nil),              // 19: proto.RogueArea
	(*CurRogue)(nil),               // 20: proto.CurRogue
	(*RogueRoom)(nil),              // 21: proto.RogueRoom
	(*RogueBuff)(nil),              // 22: proto.RogueBuff
	(*RogueHistory)(nil),           // 23: proto.RogueHistory
	(*RogueTourn)(nil),             // 24: proto.RogueTourn
	(*InspirationCircuitInfo)(nil), // 25: proto.InspirationCircuitInfo
	(*CurRogueTourn)(nil),          // 26: proto.CurRogueTourn
	(*LayerInfo)(nil),              // 27: proto.LayerInfo
	(*RogueTournRoomInfo)(nil),     // 28: proto.RogueTournRoomInfo
	(*Challenge)(nil),              // 29: proto.Challenge
	(*ChallengeList)(nil),          // 30: proto.ChallengeList
	(*CurChallenge)(nil),           // 31: proto.CurChallenge
	(*Raid)(nil),                   // 32: proto.Raid
	(*RaidInfo)(nil),               // 33: proto.RaidInfo
	(*Gacha)(nil),                  // 34: proto.Gacha
	(*GachaNum)(nil),               // 35: proto.GachaNum
	(*ContentAuditBin)(nil),        // 36: proto.ContentAuditBin
	(*Mail)(nil),                   // 37: proto.Mail
	(*MailDts)(nil),                // 38: proto.MailDts
	(*PlayerFriend)(nil),           // 39: proto.PlayerFriend
	(*Friend)(nil),                 // 40: proto.Friend
	(*Mission)(nil),                // 41: proto.Mission
	(*MainMission)(nil),            // 42: proto.MainMission
	(*MissionInfo)(nil),            // 43: proto.MissionInfo
	(*MissionCustomValue)(nil),     // 44: proto.MissionCustomValue
	(*TutorialDb)(nil),             // 45: proto.TutorialDb
	(*TutorialInfo)(nil),           // 46: proto.TutorialInfo
	(*MessageGroup)(nil),           // 47: proto.MessageGroup
	(*MessageSection)(nil),         // 48: proto.MessageSection
	(*BlockBin)(nil),               // 49: proto.BlockBin
	(*BlockList)(nil),              // 50: proto.BlockList
	(*PropInfo)(nil),               // 51: proto.PropInfo
	nil,                            // 52: proto.PlayerBasicCompBin.OpenStateMapEntry
	nil,                            // 53: proto.PlayerBasicCompBin.MessageGroupListEntry
	nil,                            // 54: proto.Activity.ActivityLoginEntry
	nil,                            // 55: proto.Avatar.AvatarListEntry
	nil,                            // 56: proto.Avatar.BattleAvatarListEntry
	nil,                            // 57: proto.AvatarBin.MultiPathAvatarInfoListEntry
	nil,                            // 58: proto.MultiPathAvatarInfo.EquipRelicEntry
	nil,                            // 59: proto.LineUp.LineUpListEntry
	nil,                            // 60: proto.LineUp.BattleLineListEntry
	nil,                            // 61: proto.Line.AvatarIdListEntry
	nil,                            // 62: proto.Item.RelicMapEntry
	nil,                            // 63: proto.Item.EquipmentMapEntry
	nil,                            // 64: proto.Item.MaterialMapEntry
	nil,                            // 65: proto.Relic.RelicAffixEntry
	nil,                            // 66: proto.Rogue.RogueAreaEntry
	nil,                            // 67: proto.Rogue.RogueHistoryListEntry
	nil,                            // 68: proto.CurRogue.RogueRoomMapEntry
	nil,                            // 69: proto.CurRogue.BuffListEntry
	nil,                            // 70: proto.RogueTourn.InspirationCircuitInfoEntry
	nil,                            // 71: proto.CurRogueTourn.CurLayerListEntry
	nil,                            // 72: proto.LayerInfo.RogueTournRoomListEntry
	nil,                            // 73: proto.Challenge.ChallengeListEntry
	nil,                            // 74: proto.Challenge.ChallengeRewardListEntry
	nil,                            // 75: proto.Raid.RaidMapEntry
	nil,                            // 76: proto.Raid.FinishRaidMapEntry
	nil,                            // 77: proto.Gacha.GachaMapEntry
	nil,                            // 78: proto.Mail.MailListEntry
	nil,                            // 79: proto.PlayerFriend.FriendListEntry
	nil,                            // 80: proto.MainMission.MainMissionListEntry
	nil,                            // 81: proto.MainMission.SubMissionListEntry
	nil,                            // 82: proto.MainMission.FinishMainMissionListEntry
	nil,                            // 83: proto.MainMission.FinishSubMissionListEntry
	nil,                            // 84: proto.TutorialDb.TutorialEntry
	nil,                            // 85: proto.TutorialDb.TutorialGuideEntry
	nil,                            // 86: proto.MessageGroup.MessageSectionListEntry
	nil,                            // 87: proto.BlockBin.BlockListEntry
	nil,                            // 88: proto.BlockList.PropInfoEntry
	(Gender)(0),                    // 89: proto.Gender
	(ExtraLineupType)(0),           // 90: proto.ExtraLineupType
	(LineAvatarType)(0),            // 91: proto.LineAvatarType
	(BattleType)(0),                // 92: proto.BattleType
	(RogueAreaStatus)(0),           // 93: proto.RogueAreaStatus
	(RogueStatus)(0),               // 94: proto.RogueStatus
	(RoomStatus)(0),                // 95: proto.RoomStatus
	(RogueTalentStatus)(0),         // 96: proto.RogueTalentStatus
	(RogueTournLayerStatus)(0),     // 97: proto.RogueTournLayerStatus
	(RogueTournRoomStatus)(0),      // 98: proto.RogueTournRoomStatus
	(ChallengeStatus)(0),           // 99: proto.ChallengeStatus
	(RaidStatus)(0),                // 100: proto.RaidStatus
	(MissionStatus)(0),             // 101: proto.MissionStatus
	(TutorialStatus)(0),            // 102: proto.TutorialStatus
	(MessageGroupStatus)(0),        // 103: proto.MessageGroupStatus
	(MessageSectionStatus)(0),      // 104: proto.MessageSectionStatus
}
var file_bin_server_proto_depIdxs = []int32{
	1,   // 0: proto.PlayerBasicCompBin.activity:type_name -> proto.Activity
	2,   // 1: proto.PlayerBasicCompBin.scene:type_name -> proto.Scene
	8,   // 2: proto.PlayerBasicCompBin.pos:type_name -> proto.VectorBin
	8,   // 3: proto.PlayerBasicCompBin.rot:type_name -> proto.VectorBin
	3,   // 4: proto.PlayerBasicCompBin.avatar:type_name -> proto.Avatar
	9,   // 5: proto.PlayerBasicCompBin.lineUp:type_name -> proto.LineUp
	12,  // 6: proto.PlayerBasicCompBin.item:type_name -> proto.Item
	34,  // 7: proto.PlayerBasicCompBin.gacha:type_name -> proto.Gacha
	17,  // 8: proto.PlayerBasicCompBin.battle:type_name -> proto.Battle
	52,  // 9: proto.PlayerBasicCompBin.open_state_map:type_name -> proto.PlayerBasicCompBin.OpenStateMapEntry
	37,  // 10: proto.PlayerBasicCompBin.mail:type_name -> proto.Mail
	39,  // 11: proto.PlayerBasicCompBin.friend:type_name -> proto.PlayerFriend
	45,  // 12: proto.PlayerBasicCompBin.tutorial:type_name -> proto.TutorialDb
	53,  // 13: proto.PlayerBasicCompBin.message_group_list:type_name -> proto.PlayerBasicCompBin.MessageGroupListEntry
	36,  // 14: proto.PlayerBasicCompBin.nickname_audit_bin:type_name -> proto.ContentAuditBin
	41,  // 15: proto.PlayerBasicCompBin.mission:type_name -> proto.Mission
	54,  // 16: proto.Activity.activity_login:type_name -> proto.Activity.ActivityLoginEntry
	55,  // 17: proto.Avatar.avatar_list:type_name -> proto.Avatar.AvatarListEntry
	89,  // 18: proto.Avatar.gender:type_name -> proto.Gender
	56,  // 19: proto.Avatar.battle_avatar_list:type_name -> proto.Avatar.BattleAvatarListEntry
	6,   // 20: proto.AvatarBin.sp_bar:type_name -> proto.AvatarSpBarInfo
	57,  // 21: proto.AvatarBin.multi_path_avatar_info_list:type_name -> proto.AvatarBin.MultiPathAvatarInfoListEntry
	7,   // 22: proto.MultiPathAvatarInfo.skilltree_list:type_name -> proto.AvatarSkillBin
	58,  // 23: proto.MultiPathAvatarInfo.equip_relic:type_name -> proto.MultiPathAvatarInfo.EquipRelicEntry
	59,  // 24: proto.LineUp.line_up_list:type_name -> proto.LineUp.LineUpListEntry
	60,  // 25: proto.LineUp.battle_line_list:type_name -> proto.LineUp.BattleLineListEntry
	61,  // 26: proto.Line.avatar_id_list:type_name -> proto.Line.AvatarIdListEntry
	90,  // 27: proto.Line.line_type:type_name -> proto.ExtraLineupType
	91,  // 28: proto.LineAvatarList.line_avatar_type:type_name -> proto.LineAvatarType
	62,  // 29: proto.Item.relic_map:type_name -> proto.Item.RelicMapEntry
	63,  // 30: proto.Item.equipment_map:type_name -> proto.Item.EquipmentMapEntry
	64,  // 31: proto.Item.material_map:type_name -> proto.Item.MaterialMapEntry
	65,  // 32: proto.Relic.relic_affix:type_name -> proto.Relic.RelicAffixEntry
	92,  // 33: proto.Battle.battle_type:type_name -> proto.BattleType
	18,  // 34: proto.Battle.rogue:type_name -> proto.Rogue
	29,  // 35: proto.Battle.challenge:type_name -> proto.Challenge
	24,  // 36: proto.Battle.rogue_tourn:type_name -> proto.RogueTourn
	32,  // 37: proto.Battle.rain:type_name -> proto.Raid
	66,  // 38: proto.Rogue.rogue_area:type_name -> proto.Rogue.RogueAreaEntry
	20,  // 39: proto.Rogue.cur_rogue:type_name -> proto.CurRogue
	67,  // 40: proto.Rogue.rogue_history_list:type_name -> proto.Rogue.RogueHistoryListEntry
	93,  // 41: proto.RogueArea.rogue_area_status:type_name -> proto.RogueAreaStatus
	68,  // 42: proto.CurRogue.rogue_room_map:type_name -> proto.CurRogue.RogueRoomMapEntry
	69,  // 43: proto.CurRogue.buff_list:type_name -> proto.CurRogue.BuffListEntry
	94,  // 44: proto.CurRogue.status:type_name -> proto.RogueStatus
	95,  // 45: proto.RogueRoom.room_status:type_name -> proto.RoomStatus
	70,  // 46: proto.RogueTourn.inspiration_circuit_info:type_name -> proto.RogueTourn.InspirationCircuitInfoEntry
	26,  // 47: proto.RogueTourn.cur_rogue_tourn:type_name -> proto.CurRogueTourn
	96,  // 48: proto.InspirationCircuitInfo.status:type_name -> proto.RogueTalentStatus
	71,  // 49: proto.CurRogueTourn.cur_layer_list:type_name -> proto.CurRogueTourn.CurLayerListEntry
	97,  // 50: proto.LayerInfo.status:type_name -> proto.RogueTournLayerStatus
	72,  // 51: proto.LayerInfo.rogue_tourn_room_list:type_name -> proto.LayerInfo.RogueTournRoomListEntry
	98,  // 52: proto.RogueTournRoomInfo.status:type_name -> proto.RogueTournRoomStatus
	73,  // 53: proto.Challenge.challenge_list:type_name -> proto.Challenge.ChallengeListEntry
	74,  // 54: proto.Challenge.challenge_reward_list:type_name -> proto.Challenge.ChallengeRewardListEntry
	31,  // 55: proto.Challenge.cur_challenge:type_name -> proto.CurChallenge
	99,  // 56: proto.CurChallenge.status:type_name -> proto.ChallengeStatus
	75,  // 57: proto.Raid.raid_map:type_name -> proto.Raid.RaidMapEntry
	76,  // 58: proto.Raid.finish_raid_map:type_name -> proto.Raid.FinishRaidMapEntry
	100, // 59: proto.RaidInfo.status:type_name -> proto.RaidStatus
	8,   // 60: proto.RaidInfo.pos:type_name -> proto.VectorBin
	8,   // 61: proto.RaidInfo.rot:type_name -> proto.VectorBin
	77,  // 62: proto.Gacha.gacha_map:type_name -> proto.Gacha.GachaMapEntry
	78,  // 63: proto.Mail.MailList:type_name -> proto.Mail.MailListEntry
	79,  // 64: proto.PlayerFriend.friend_list:type_name -> proto.PlayerFriend.FriendListEntry
	42,  // 65: proto.Mission.main_mission:type_name -> proto.MainMission
	80,  // 66: proto.MainMission.main_mission_list:type_name -> proto.MainMission.MainMissionListEntry
	81,  // 67: proto.MainMission.sub_mission_list:type_name -> proto.MainMission.SubMissionListEntry
	82,  // 68: proto.MainMission.finish_main_mission_list:type_name -> proto.MainMission.FinishMainMissionListEntry
	83,  // 69: proto.MainMission.finish_sub_mission_list:type_name -> proto.MainMission.FinishSubMissionListEntry
	101, // 70: proto.MissionInfo.status:type_name -> proto.MissionStatus
	44,  // 71: proto.MissionInfo.mission_custom_value:type_name -> proto.MissionCustomValue
	84,  // 72: proto.TutorialDb.Tutorial:type_name -> proto.TutorialDb.TutorialEntry
	85,  // 73: proto.TutorialDb.TutorialGuide:type_name -> proto.TutorialDb.TutorialGuideEntry
	102, // 74: proto.TutorialInfo.status:type_name -> proto.TutorialStatus
	86,  // 75: proto.MessageGroup.message_section_list:type_name -> proto.MessageGroup.MessageSectionListEntry
	103, // 76: proto.MessageGroup.status:type_name -> proto.MessageGroupStatus
	104, // 77: proto.MessageSection.status:type_name -> proto.MessageSectionStatus
	87,  // 78: proto.BlockBin.block_list:type_name -> proto.BlockBin.BlockListEntry
	88,  // 79: proto.BlockList.prop_info:type_name -> proto.BlockList.PropInfoEntry
	47,  // 80: proto.PlayerBasicCompBin.MessageGroupListEntry.value:type_name -> proto.MessageGroup
	4,   // 81: proto.Avatar.AvatarListEntry.value:type_name -> proto.AvatarBin
	4,   // 82: proto.Avatar.BattleAvatarListEntry.value:type_name -> proto.AvatarBin
	5,   // 83: proto.AvatarBin.MultiPathAvatarInfoListEntry.value:type_name -> proto.MultiPathAvatarInfo
	10,  // 84: proto.LineUp.LineUpListEntry.value:type_name -> proto.Line
	10,  // 85: proto.LineUp.BattleLineListEntry.value:type_name -> proto.Line
	11,  // 86: proto.Line.AvatarIdListEntry.value:type_name -> proto.LineAvatarList
	13,  // 87: proto.Item.RelicMapEntry.value:type_name -> proto.Relic
	15,  // 88: proto.Item.EquipmentMapEntry.value:type_name -> proto.Equipment
	14,  // 89: proto.Relic.RelicAffixEntry.value:type_name -> proto.RelicAffix
	19,  // 90: proto.Rogue.RogueAreaEntry.value:type_name -> proto.RogueArea
	23,  // 91: proto.Rogue.RogueHistoryListEntry.value:type_name -> proto.RogueHistory
	21,  // 92: proto.CurRogue.RogueRoomMapEntry.value:type_name -> proto.RogueRoom
	22,  // 93: proto.CurRogue.BuffListEntry.value:type_name -> proto.RogueBuff
	25,  // 94: proto.RogueTourn.InspirationCircuitInfoEntry.value:type_name -> proto.InspirationCircuitInfo
	27,  // 95: proto.CurRogueTourn.CurLayerListEntry.value:type_name -> proto.LayerInfo
	28,  // 96: proto.LayerInfo.RogueTournRoomListEntry.value:type_name -> proto.RogueTournRoomInfo
	30,  // 97: proto.Challenge.ChallengeListEntry.value:type_name -> proto.ChallengeList
	33,  // 98: proto.Raid.RaidMapEntry.value:type_name -> proto.RaidInfo
	33,  // 99: proto.Raid.FinishRaidMapEntry.value:type_name -> proto.RaidInfo
	35,  // 100: proto.Gacha.GachaMapEntry.value:type_name -> proto.GachaNum
	38,  // 101: proto.Mail.MailListEntry.value:type_name -> proto.MailDts
	40,  // 102: proto.PlayerFriend.FriendListEntry.value:type_name -> proto.Friend
	43,  // 103: proto.MainMission.MainMissionListEntry.value:type_name -> proto.MissionInfo
	43,  // 104: proto.MainMission.SubMissionListEntry.value:type_name -> proto.MissionInfo
	43,  // 105: proto.MainMission.FinishMainMissionListEntry.value:type_name -> proto.MissionInfo
	43,  // 106: proto.MainMission.FinishSubMissionListEntry.value:type_name -> proto.MissionInfo
	46,  // 107: proto.TutorialDb.TutorialEntry.value:type_name -> proto.TutorialInfo
	46,  // 108: proto.TutorialDb.TutorialGuideEntry.value:type_name -> proto.TutorialInfo
	48,  // 109: proto.MessageGroup.MessageSectionListEntry.value:type_name -> proto.MessageSection
	50,  // 110: proto.BlockBin.BlockListEntry.value:type_name -> proto.BlockList
	51,  // 111: proto.BlockList.PropInfoEntry.value:type_name -> proto.PropInfo
	112, // [112:112] is the sub-list for method output_type
	112, // [112:112] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_bin_server_proto_init() }
func file_bin_server_proto_init() {
	if File_bin_server_proto != nil {
		return
	}
	file_enum_server_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bin_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBasicCompBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPathAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSpBarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarSkillBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineAvatarList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelicAffix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurRogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueTourn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspirationCircuitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurRogueTourn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueTournRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gacha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GachaNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAuditBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailDts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainMission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionCustomValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bin_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_proto_goTypes,
		DependencyIndexes: file_bin_server_proto_depIdxs,
		MessageInfos:      file_bin_server_proto_msgTypes,
	}.Build()
	File_bin_server_proto = out.File
	file_bin_server_proto_rawDesc = nil
	file_bin_server_proto_goTypes = nil
	file_bin_server_proto_depIdxs = nil
}
