// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueDiceInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueDiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RerollTimes     uint32               `protobuf:"varint,6,opt,name=reroll_times,json=rerollTimes,proto3" json:"reroll_times,omitempty"`
	OPIIBFEJFHD     bool                 `protobuf:"varint,13,opt,name=OPIIBFEJFHD,proto3" json:"OPIIBFEJFHD,omitempty"`
	NNLGFGFKGBE     uint32               `protobuf:"varint,12,opt,name=NNLGFGFKGBE,proto3" json:"NNLGFGFKGBE,omitempty"`
	IPFCLBCNGAA     *LNOPMPPABKJ         `protobuf:"bytes,1385,opt,name=IPFCLBCNGAA,proto3" json:"IPFCLBCNGAA,omitempty"`
	Dice            *ChessRogueDice      `protobuf:"bytes,1510,opt,name=dice,proto3" json:"dice,omitempty"`
	CurSurfaceIndex uint32               `protobuf:"varint,9,opt,name=cur_surface_index,json=curSurfaceIndex,proto3" json:"cur_surface_index,omitempty"`
	CanRerollDice   bool                 `protobuf:"varint,504,opt,name=can_reroll_dice,json=canRerollDice,proto3" json:"can_reroll_dice,omitempty"`
	CurSurfaceId    uint32               `protobuf:"varint,3,opt,name=cur_surface_id,json=curSurfaceId,proto3" json:"cur_surface_id,omitempty"`
	CheatTimes      uint32               `protobuf:"varint,14,opt,name=cheat_times,json=cheatTimes,proto3" json:"cheat_times,omitempty"`
	AKMEEDBBDNI     []uint32             `protobuf:"varint,1676,rep,packed,name=AKMEEDBBDNI,proto3" json:"AKMEEDBBDNI,omitempty"`
	BranchId        uint32               `protobuf:"varint,8,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	BDMBIDHFKJF     *KEGPAIEJBGE         `protobuf:"bytes,843,opt,name=BDMBIDHFKJF,proto3" json:"BDMBIDHFKJF,omitempty"`
	DiceType        ChessRogueDiceType   `protobuf:"varint,1,opt,name=dice_type,json=diceType,proto3,enum=ChessRogueDiceType" json:"dice_type,omitempty"`
	OJJHKDAKBGP     int32                `protobuf:"varint,470,opt,name=OJJHKDAKBGP,proto3" json:"OJJHKDAKBGP,omitempty"`
	FLFAGDFGPMC     uint32               `protobuf:"varint,5,opt,name=FLFAGDFGPMC,proto3" json:"FLFAGDFGPMC,omitempty"`
	DiceStatus      ChessRogueDiceStatus `protobuf:"varint,11,opt,name=dice_status,json=diceStatus,proto3,enum=ChessRogueDiceStatus" json:"dice_status,omitempty"`
	CurBranchId     uint32               `protobuf:"varint,10,opt,name=cur_branch_id,json=curBranchId,proto3" json:"cur_branch_id,omitempty"`
}

func (x *ChessRogueDiceInfo) Reset() {
	*x = ChessRogueDiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueDiceInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueDiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueDiceInfo) ProtoMessage() {}

func (x *ChessRogueDiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueDiceInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueDiceInfo.ProtoReflect.Descriptor instead.
func (*ChessRogueDiceInfo) Descriptor() ([]byte, []int) {
	return file_ChessRogueDiceInfo_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueDiceInfo) GetRerollTimes() uint32 {
	if x != nil {
		return x.RerollTimes
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetOPIIBFEJFHD() bool {
	if x != nil {
		return x.OPIIBFEJFHD
	}
	return false
}

func (x *ChessRogueDiceInfo) GetNNLGFGFKGBE() uint32 {
	if x != nil {
		return x.NNLGFGFKGBE
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetIPFCLBCNGAA() *LNOPMPPABKJ {
	if x != nil {
		return x.IPFCLBCNGAA
	}
	return nil
}

func (x *ChessRogueDiceInfo) GetDice() *ChessRogueDice {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *ChessRogueDiceInfo) GetCurSurfaceIndex() uint32 {
	if x != nil {
		return x.CurSurfaceIndex
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetCanRerollDice() bool {
	if x != nil {
		return x.CanRerollDice
	}
	return false
}

func (x *ChessRogueDiceInfo) GetCurSurfaceId() uint32 {
	if x != nil {
		return x.CurSurfaceId
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetCheatTimes() uint32 {
	if x != nil {
		return x.CheatTimes
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetAKMEEDBBDNI() []uint32 {
	if x != nil {
		return x.AKMEEDBBDNI
	}
	return nil
}

func (x *ChessRogueDiceInfo) GetBranchId() uint32 {
	if x != nil {
		return x.BranchId
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetBDMBIDHFKJF() *KEGPAIEJBGE {
	if x != nil {
		return x.BDMBIDHFKJF
	}
	return nil
}

func (x *ChessRogueDiceInfo) GetDiceType() ChessRogueDiceType {
	if x != nil {
		return x.DiceType
	}
	return ChessRogueDiceType_CHESS_ROGUE_DICE_FIXED
}

func (x *ChessRogueDiceInfo) GetOJJHKDAKBGP() int32 {
	if x != nil {
		return x.OJJHKDAKBGP
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetFLFAGDFGPMC() uint32 {
	if x != nil {
		return x.FLFAGDFGPMC
	}
	return 0
}

func (x *ChessRogueDiceInfo) GetDiceStatus() ChessRogueDiceStatus {
	if x != nil {
		return x.DiceStatus
	}
	return ChessRogueDiceStatus_CHESS_ROGUE_DICE_IDLE
}

func (x *ChessRogueDiceInfo) GetCurBranchId() uint32 {
	if x != nil {
		return x.CurBranchId
	}
	return 0
}

var File_ChessRogueDiceInfo_proto protoreflect.FileDescriptor

var file_ChessRogueDiceInfo_proto_rawDesc = []byte{
	0x0a, 0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4b, 0x45,
	0x47, 0x50, 0x41, 0x49, 0x45, 0x4a, 0x42, 0x47, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4c, 0x4e, 0x4f, 0x50, 0x4d,
	0x50, 0x50, 0x41, 0x42, 0x4b, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x05, 0x0a,
	0x12, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x50, 0x49, 0x49, 0x42, 0x46,
	0x45, 0x4a, 0x46, 0x48, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x50, 0x49,
	0x49, 0x42, 0x46, 0x45, 0x4a, 0x46, 0x48, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x4e, 0x4c, 0x47,
	0x46, 0x47, 0x46, 0x4b, 0x47, 0x42, 0x45, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4e,
	0x4e, 0x4c, 0x47, 0x46, 0x47, 0x46, 0x4b, 0x47, 0x42, 0x45, 0x12, 0x2f, 0x0a, 0x0b, 0x49, 0x50,
	0x46, 0x43, 0x4c, 0x42, 0x43, 0x4e, 0x47, 0x41, 0x41, 0x18, 0xe9, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4c, 0x4e, 0x4f, 0x50, 0x4d, 0x50, 0x50, 0x41, 0x42, 0x4b, 0x4a, 0x52, 0x0b,
	0x49, 0x50, 0x46, 0x43, 0x4c, 0x42, 0x43, 0x4e, 0x47, 0x41, 0x41, 0x12, 0x24, 0x0a, 0x04, 0x64,
	0x69, 0x63, 0x65, 0x18, 0xe6, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x63, 0x65,
	0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x72, 0x6f,
	0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0b, 0x41, 0x4b, 0x4d, 0x45, 0x45, 0x44, 0x42, 0x42, 0x44, 0x4e, 0x49, 0x18, 0x8c, 0x0d, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x4b, 0x4d, 0x45, 0x45, 0x44, 0x42, 0x42, 0x44, 0x4e, 0x49,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0b, 0x42, 0x44, 0x4d, 0x42, 0x49, 0x44, 0x48, 0x46, 0x4b, 0x4a, 0x46, 0x18, 0xcb, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4b, 0x45, 0x47, 0x50, 0x41, 0x49, 0x45, 0x4a, 0x42, 0x47,
	0x45, 0x52, 0x0b, 0x42, 0x44, 0x4d, 0x42, 0x49, 0x44, 0x48, 0x46, 0x4b, 0x4a, 0x46, 0x12, 0x30,
	0x0a, 0x09, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x4f, 0x4a, 0x4a, 0x48, 0x4b, 0x44, 0x41, 0x4b, 0x42, 0x47, 0x50, 0x18,
	0xd6, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x4a, 0x4a, 0x48, 0x4b, 0x44, 0x41, 0x4b,
	0x42, 0x47, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x4c, 0x46, 0x41, 0x47, 0x44, 0x46, 0x47, 0x50,
	0x4d, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x4c, 0x46, 0x41, 0x47, 0x44,
	0x46, 0x47, 0x50, 0x4d, 0x43, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x44, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x64, 0x42, 0x28, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b,
	0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueDiceInfo_proto_rawDescOnce sync.Once
	file_ChessRogueDiceInfo_proto_rawDescData = file_ChessRogueDiceInfo_proto_rawDesc
)

func file_ChessRogueDiceInfo_proto_rawDescGZIP() []byte {
	file_ChessRogueDiceInfo_proto_rawDescOnce.Do(func() {
		file_ChessRogueDiceInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueDiceInfo_proto_rawDescData)
	})
	return file_ChessRogueDiceInfo_proto_rawDescData
}

var file_ChessRogueDiceInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueDiceInfo_proto_goTypes = []interface{}{
	(*ChessRogueDiceInfo)(nil), // 0: ChessRogueDiceInfo
	(*LNOPMPPABKJ)(nil),        // 1: LNOPMPPABKJ
	(*ChessRogueDice)(nil),     // 2: ChessRogueDice
	(*KEGPAIEJBGE)(nil),        // 3: KEGPAIEJBGE
	(ChessRogueDiceType)(0),    // 4: ChessRogueDiceType
	(ChessRogueDiceStatus)(0),  // 5: ChessRogueDiceStatus
}
var file_ChessRogueDiceInfo_proto_depIdxs = []int32{
	1, // 0: ChessRogueDiceInfo.IPFCLBCNGAA:type_name -> LNOPMPPABKJ
	2, // 1: ChessRogueDiceInfo.dice:type_name -> ChessRogueDice
	3, // 2: ChessRogueDiceInfo.BDMBIDHFKJF:type_name -> KEGPAIEJBGE
	4, // 3: ChessRogueDiceInfo.dice_type:type_name -> ChessRogueDiceType
	5, // 4: ChessRogueDiceInfo.dice_status:type_name -> ChessRogueDiceStatus
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ChessRogueDiceInfo_proto_init() }
func file_ChessRogueDiceInfo_proto_init() {
	if File_ChessRogueDiceInfo_proto != nil {
		return
	}
	file_ChessRogueDiceStatus_proto_init()
	file_ChessRogueDice_proto_init()
	file_KEGPAIEJBGE_proto_init()
	file_ChessRogueDiceType_proto_init()
	file_LNOPMPPABKJ_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueDiceInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueDiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueDiceInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueDiceInfo_proto_goTypes,
		DependencyIndexes: file_ChessRogueDiceInfo_proto_depIdxs,
		MessageInfos:      file_ChessRogueDiceInfo_proto_msgTypes,
	}.Build()
	File_ChessRogueDiceInfo_proto = out.File
	file_ChessRogueDiceInfo_proto_rawDesc = nil
	file_ChessRogueDiceInfo_proto_goTypes = nil
	file_ChessRogueDiceInfo_proto_depIdxs = nil
}
