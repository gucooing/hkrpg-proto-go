// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueNousDice.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueNousDice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GFGCPJOHMEL     uint32   `protobuf:"varint,9,opt,name=GFGCPJOHMEL,proto3" json:"GFGCPJOHMEL,omitempty"` // 1
	CurSurfaceIndex uint32   `protobuf:"varint,13,opt,name=cur_surface_index,json=curSurfaceIndex,proto3" json:"cur_surface_index,omitempty"`
	NOGJMMEDGLL     []uint32 `protobuf:"varint,833,rep,packed,name=NOGJMMEDGLL,proto3" json:"NOGJMMEDGLL,omitempty"`
	// FEDEMDEEJML JLCEDGIHAFF = 12;
	RerollTimes        uint32                  `protobuf:"varint,2,opt,name=reroll_times,json=rerollTimes,proto3" json:"reroll_times,omitempty"` // 2
	DiceInfo           *ChessRogueNousDiceInfo `protobuf:"bytes,208,opt,name=dice_info,json=diceInfo,proto3" json:"dice_info,omitempty"`
	DiceBranchIdRemote uint32                  `protobuf:"varint,14,opt,name=dice_branch_id_remote,json=diceBranchIdRemote,proto3" json:"dice_branch_id_remote,omitempty"` // idk
	DiceBranchId       uint32                  `protobuf:"varint,1,opt,name=dice_branch_id,json=diceBranchId,proto3" json:"dice_branch_id,omitempty"`
	// NMNBNLMAJGC POHKHEGDOHO = 343;  // guess its about modifier
	CHGLMLDAMJH bool   `protobuf:"varint,1185,opt,name=CHGLMLDAMJH,proto3" json:"CHGLMLDAMJH,omitempty"`              // true
	CheatTimes  uint32 `protobuf:"varint,4,opt,name=cheat_times,json=cheatTimes,proto3" json:"cheat_times,omitempty"` // 1
	HIJBOPMGBAP uint32 `protobuf:"varint,5,opt,name=HIJBOPMGBAP,proto3" json:"HIJBOPMGBAP,omitempty"`                 // 10
	// sint32 PAOHKKNCNCD = 625;
	BDENADDOCAC bool `protobuf:"varint,10,opt,name=BDENADDOCAC,proto3" json:"BDENADDOCAC,omitempty"` // true
	// NMNBNLMAJGC cur_surface_effect = 6;
	CurSurfaceId uint32 `protobuf:"varint,3,opt,name=cur_surface_id,json=curSurfaceId,proto3" json:"cur_surface_id,omitempty"` //KIPGDFIPNPB KHDDLDDBLMI = 8;
}

func (x *ChessRogueNousDice) Reset() {
	*x = ChessRogueNousDice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueNousDice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueNousDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueNousDice) ProtoMessage() {}

func (x *ChessRogueNousDice) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueNousDice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueNousDice.ProtoReflect.Descriptor instead.
func (*ChessRogueNousDice) Descriptor() ([]byte, []int) {
	return file_ChessRogueNousDice_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueNousDice) GetGFGCPJOHMEL() uint32 {
	if x != nil {
		return x.GFGCPJOHMEL
	}
	return 0
}

func (x *ChessRogueNousDice) GetCurSurfaceIndex() uint32 {
	if x != nil {
		return x.CurSurfaceIndex
	}
	return 0
}

func (x *ChessRogueNousDice) GetNOGJMMEDGLL() []uint32 {
	if x != nil {
		return x.NOGJMMEDGLL
	}
	return nil
}

func (x *ChessRogueNousDice) GetRerollTimes() uint32 {
	if x != nil {
		return x.RerollTimes
	}
	return 0
}

func (x *ChessRogueNousDice) GetDiceInfo() *ChessRogueNousDiceInfo {
	if x != nil {
		return x.DiceInfo
	}
	return nil
}

func (x *ChessRogueNousDice) GetDiceBranchIdRemote() uint32 {
	if x != nil {
		return x.DiceBranchIdRemote
	}
	return 0
}

func (x *ChessRogueNousDice) GetDiceBranchId() uint32 {
	if x != nil {
		return x.DiceBranchId
	}
	return 0
}

func (x *ChessRogueNousDice) GetCHGLMLDAMJH() bool {
	if x != nil {
		return x.CHGLMLDAMJH
	}
	return false
}

func (x *ChessRogueNousDice) GetCheatTimes() uint32 {
	if x != nil {
		return x.CheatTimes
	}
	return 0
}

func (x *ChessRogueNousDice) GetHIJBOPMGBAP() uint32 {
	if x != nil {
		return x.HIJBOPMGBAP
	}
	return 0
}

func (x *ChessRogueNousDice) GetBDENADDOCAC() bool {
	if x != nil {
		return x.BDENADDOCAC
	}
	return false
}

func (x *ChessRogueNousDice) GetCurSurfaceId() uint32 {
	if x != nil {
		return x.CurSurfaceId
	}
	return 0
}

var File_ChessRogueNousDice_proto protoreflect.FileDescriptor

var file_ChessRogueNousDice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x75, 0x73,
	0x44, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x44, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x44, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x47, 0x46, 0x47, 0x43, 0x50, 0x4a, 0x4f, 0x48, 0x4d, 0x45, 0x4c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x46, 0x47, 0x43, 0x50, 0x4a, 0x4f, 0x48, 0x4d, 0x45,
	0x4c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0b, 0x4e, 0x4f, 0x47, 0x4a, 0x4d, 0x4d, 0x45, 0x44, 0x47, 0x4c, 0x4c, 0x18, 0xc1, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4e, 0x4f, 0x47, 0x4a, 0x4d, 0x4d, 0x45, 0x44, 0x47, 0x4c, 0x4c,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x44, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x64, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x63, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x48, 0x47, 0x4c, 0x4d, 0x4c, 0x44, 0x41, 0x4d,
	0x4a, 0x48, 0x18, 0xa1, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x48, 0x47, 0x4c, 0x4d,
	0x4c, 0x44, 0x41, 0x4d, 0x4a, 0x48, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x49, 0x4a, 0x42, 0x4f,
	0x50, 0x4d, 0x47, 0x42, 0x41, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x49,
	0x4a, 0x42, 0x4f, 0x50, 0x4d, 0x47, 0x42, 0x41, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x44, 0x45,
	0x4e, 0x41, 0x44, 0x44, 0x4f, 0x43, 0x41, 0x43, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x42, 0x44, 0x45, 0x4e, 0x41, 0x44, 0x44, 0x4f, 0x43, 0x41, 0x43, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueNousDice_proto_rawDescOnce sync.Once
	file_ChessRogueNousDice_proto_rawDescData = file_ChessRogueNousDice_proto_rawDesc
)

func file_ChessRogueNousDice_proto_rawDescGZIP() []byte {
	file_ChessRogueNousDice_proto_rawDescOnce.Do(func() {
		file_ChessRogueNousDice_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueNousDice_proto_rawDescData)
	})
	return file_ChessRogueNousDice_proto_rawDescData
}

var file_ChessRogueNousDice_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueNousDice_proto_goTypes = []interface{}{
	(*ChessRogueNousDice)(nil),     // 0: ChessRogueNousDice
	(*ChessRogueNousDiceInfo)(nil), // 1: ChessRogueNousDiceInfo
}
var file_ChessRogueNousDice_proto_depIdxs = []int32{
	1, // 0: ChessRogueNousDice.dice_info:type_name -> ChessRogueNousDiceInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ChessRogueNousDice_proto_init() }
func file_ChessRogueNousDice_proto_init() {
	if File_ChessRogueNousDice_proto != nil {
		return
	}
	file_ChessRogueNousDiceInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueNousDice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueNousDice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueNousDice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueNousDice_proto_goTypes,
		DependencyIndexes: file_ChessRogueNousDice_proto_depIdxs,
		MessageInfos:      file_ChessRogueNousDice_proto_msgTypes,
	}.Build()
	File_ChessRogueNousDice_proto = out.File
	file_ChessRogueNousDice_proto_rawDesc = nil
	file_ChessRogueNousDice_proto_goTypes = nil
	file_ChessRogueNousDice_proto_depIdxs = nil
}
